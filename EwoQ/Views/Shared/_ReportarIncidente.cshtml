@model EwoQ.Models.ReporteIncidentesViewModel

 @{
     Layout = null;
}
<!-- Bootstrap Material Datetime Picker Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-material-datetimepicker/css/bootstrap-material-datetimepicker.css" rel="stylesheet" />

<!-- Bootstrap Select Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />

<!-- Jquery UI Css -->
<link href="~/Scripts/Adminbsb/plugins/jquery-ui-1.12.1.autocomplete/jquery-ui.min.css" rel="stylesheet" />

<!-- SlickGrid Css -->
<link href="~/Scripts/Adminbsb/plugins/slickgrid/slick.grid.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/css/jquery-ui.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/examples.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/css/select2.css" rel="stylesheet" />
<!-- SWEETALERT Css -->
<link href="~/Scripts/Adminbsb/plugins/sweetalert/sweetalert.css" rel="stylesheet">


<style>
    .form-group .form-control {
        border: 1px solid;
        border-radius: 5px;
        padding: 5px;
    }

    .select2-container {
        top: -3px;
        left: -6px;
    }

    .select2-container .select2-selection--single {
        height: 26px;
    }
</style>
@using (Html.BeginForm("Create", "ReportarIncidentes", FormMethod.Post, new { id = "formReporte" }))
{
    <div class="card">
        <div class="header bg-light-blue">
            <h2>
                EWO (Emergency Work Order)
            </h2>
            <h2>
                DOCUMENTO # @Model.Consecutivo<small>Diligenciamiento de nuevo formato ™</small>
            </h2>
        </div>
        <div class="body js-sweetalert clearfix">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">

                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.FchApertInvestigacion)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">date_range</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.FchApertInvestigacion, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Seleccione fecha...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.HrApertInvestigacion)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">access_time</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.HrApertInvestigacion, new { htmlAttributes = new { @class = "form-control timepicker selectpick", placeholder = "Seleccione hora...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.HrEvento)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">access_time</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.HrEvento, new { htmlAttributes = new { @class = "form-control timepicker", placeholder = "Seleccione hora...", required = "required" } })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.FchEntregaInvestigacion)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">date_range</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.FchEntregaInvestigacion, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Seleccione fecha...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.HrEntregaInvestigacion)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">access_time</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.HrEntregaInvestigacion, new { htmlAttributes = new { @class = "form-control timepicker", placeholder = "Seleccione hora...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.TipoIncidente)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">report_problem</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="TipoIncidente" name="TipoIncidente" class="selectpicker show-tick" required>
                                    @foreach (var item in Model.TipoIncidenteList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.Recurrente)</b>
                        <div class="input-group">
                            <div class="switch">
                                <label>
                                    NO
                                    <input name="Recurrente" type="checkbox">
                                    <span class="lever"></span>
                                    SI
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.IdArea)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">edit_location</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="IdArea" name="IdArea" data-size="5" data-live-search="true" class="selectpicker show-tick">
                                    @foreach (var item in Model.AreasList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.IdLinea)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">edit_location</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="IdLinea" name="IdLinea" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                    @foreach (var item in Model.LineasList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.EtapaProceso)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">rotate_90_degrees_ccw</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.EtapaProceso, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba etapa del proceso...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.IdCoorSup)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">person</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="IdCoorSup" name="IdCoorSup" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                    @foreach (var item in Model.AdminUsersList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.IdRespArea)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">person</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="IdRespArea" name="IdRespArea" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                    @foreach (var item in Model.AdminUsersList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <b>@Html.LabelFor(model => model.IdOpeRes)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">person</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="IdOpeRes" name="IdOpeRes" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                    @foreach (var item in Model.OperatingUsersList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <b>@Html.LabelFor(model => model.IdLidInv)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">person</i>
                            </span>
                            <div class="form-line" style="border:none;">
                                <select id="IdLidInv" name="IdLidInv" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                    @foreach (var item in Model.AdminUsersList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="header bg-light-blue">
            <h2>
                Información del producto<small>Nuevo reporte</small>
            </h2>
        </div>
        <div class="body js-sweetalert clearfix">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="row">
                    <div class="col-sm-4">
                        <b>@Html.LabelFor(model => model.NombreProducto)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">text_format</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.NombreProducto, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese nombre producto...", required = "required" } })

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <b>@Html.LabelFor(model => model.CodigoSAP)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">format_list_numbered</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.CodigoSAP, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese código sap...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <b>@Html.LabelFor(model => model.Lote)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">pages</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.Lote, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese lote...", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <b>@Html.LabelFor(model => model.TiempoLineaParada)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">access_time</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.TiempoLineaParada, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-2">
                        <b>@Html.LabelFor(model => model.Toneladas)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">play_for_work</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.Toneladas, new { htmlAttributes = new { @class = "form-control align-center", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <b>@Html.LabelFor(model => model.NumCajas)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">play_for_work</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.NumCajas, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <b>@Html.LabelFor(model => model.NumPallet)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">layers</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.NumPallet, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <b>@Html.LabelFor(model => model.Unidades)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">layers</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.Unidades, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <b>@Html.LabelFor(model => model.TamanoFormato)</b>
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="material-icons">layers</i>
                            </span>
                            <div class="form-line">
                                @Html.EditorFor(model => model.TamanoFormato, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="header bg-light-blue">
            <h2>
                Detalles del problema<small>Nuevo reporte</small>
            </h2>
        </div>
        <div class="body js-sweetalert clearfix">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DescripcionProblema)
                            @Html.TextAreaFor(model => model.DescripcionProblema, 4, 0, new { @class = "form-control rounded-10", placeholder = "Escriba aquí la descripción del problema...", required = "required" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.AccionesList)
                            <div id="gridAcciones" style="width:100%;height:300px;"></div>
                        </div>
                    </div>

                </div>
            </div>

            @if ((bool)ViewData["showButton"])
            {
                <div class="form-group">
                    <button type="button" class="btn btn-primary center-block" style="width:50%; margin:0 auto;" onclick="AddReporte()">Reportar</button>
                </div>
            }
        </div>
    </div>

}

<div class="modal fade" id="mdlExito" tabindex="-1" role="dialog" aria-labelledby="mdlExito-label">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="mdlExito-label">Reporte de incidentes</h4>
            </div>
            <div class="modal-body">
                <p id="modalMsg"> </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="location.href='/Home/Index'">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<!-- Select Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-select/js/bootstrap-select.min.js"></script>

<!-- Moment Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/momentjs/moment.js"></script>

<!-- Bootstrap Material Datetime Picker Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js"></script>

<!-- Jquery UI Autocomplete -->
<script src="~/Scripts/Adminbsb/plugins/jquery-ui-1.12.1.autocomplete/jquery-ui.min.js"></script>

<!-- Input Mask Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/jquery-inputmask/jquery.inputmask.bundle.js"></script>

<!-- SlickGrid Js -->
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery.event.drag-2.3.0.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.core.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.grid.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.formatters.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.editors.js"></script>


<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/firebugx.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery-ui-1.11.3.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery-ui.min.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/select2.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellrangeselector.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellselectionmodel.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellrangedecorator.js"></script>

<!-- SweetAlert Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/sweetalert/sweetalert.min.js"></script>

<script>
    var cmd = new Array();
    var grid;

    function populateSelect(select, dataSource, addBlank) {
        var index, len, newOption;

        if (addBlank) { select.appendChild(new Option('', '')); }

        $.each(dataSource, function (value, text) {
            newOption = new Option(text.NombresCommpletos, text.Id);
            select.appendChild(newOption);
        });
    };

    function SelectEditor(args) {
        var $input;
        var defaultValue;
        this.keyCaptureList = [Slick.keyCode.UP, Slick.keyCode.DOWN, Slick.keyCode.ENTER];

        this.init = function () {
            $input = $('<select></select>');
            $input.width(args.container.clientWidth + 3);
            populateSelect($input[0], args.column.dataSource, true);
            $input.appendTo(args.container);
            $input.focus().select();

            $input.select2({
                placeholder: '-',
                allowClear: true
            });
        };

        this.destroy = function () {
            $input.select2('destroy');
        };

        this.show = function () {

        };
        this.hide = function () {
            $input.select('results_hide');
        };
        this.focus = function () {
            $input.select2('input_focus');
        };
        this.loadValue = function (item) {
            defaultValue = item[args.column.field];
            $input.val(defaultValue);
            $input[0].defaultValue = defaultValue;
            $input.trigger('change.select2');
        };
        this.serializeValue = function () {
            return $input.val();
        };
        this.applyValue = function (item, state) {
            item[args.column.field] = state;
        }
        this.isValueChanged = function () {
            return (!($input.val() == "" && defaultValue == null)) && ($input.val() != defaultValue);
        };
        this.validate = function () {
            return {
                valid: true,
                msg: null
            };
        };
        this.init();
    }

    function select2Formatter(row, cell, value, columnDef, dataContext) {
        if (value) {
            return columnDef.dataSource.find(x => x.Id === value).NombresCommpletos || '-';
        }
        else {
            return '-';
        }
    }

    function RemoveClick(index) {
        var data = grid.getData();
        data.splice(index, 1);
        grid.setData(data);
        grid.render();
    }

    function initGrid() {
        var columns =
            [
                { id: "titulo", name: "Acción", field: "accion", minWidth: 300, editable: true, editor: Slick.Editors.Text },
                { id: "id_responsable", name: "Responsable", field: "codigo_responsable", minWidth: 200, formatter: select2Formatter, editor: SelectEditor, dataSource: user_data },
                { id: "fecha_compromiso", name: "Fecha de compromiso", field: "fecha_compromiso", minWidth: 130, editor: Slick.Editors.Date },
                { id: "evi_efe", name: "Evidencia/Efectividad", field: "evidencia_efectividad", minWidth: 120, resizable: false, formatter: Slick.Formatters.PercentCompleteBar, editor: Slick.Editors.PercentComplete },
                {
                    id: 'id', name: '#', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deleteSG" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ')">Eliminar</a>';
                    }
                }
            ];

        var options =
            {
                editable: true,
                enableAddRow: true,
                enableCellNavigation: true,
                asyncEditorLoading: false,
                autoEdit: false,
                forceFitColumns: false
            };

        //INICIALIZACIÓN DEL GRID
        var data = [];
        //for (var i = 0; i < 5; i++) {
        //    var d = (data[i] = {});
        //    d["titulo"] = "Elemento " + i + 9;
        //    d["NombresCommpletos"] = "280475b9-58b9-441c-9142-e2acc9c1139b";
        //    d["fecha_compromiso"] = getCurrentDate();
        //    d["evi_efe"] = 0;
        //}

        grid = new Slick.Grid("#gridAcciones", data, columns, options);
        grid.setSelectionModel(new Slick.CellSelectionModel());
        grid.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            grid.invalidateRow(data.length);
            data.push(item);
            grid.updateRowCount();
            grid.render();
        });

        $('#gridAcciones').on('focusout', '.editor-percentcomplete', function () {

            window.setTimeout(function () {

                if (Slick.GlobalEditorLock.isActive())
                    Slick.GlobalEditorLock.commitCurrentEdit();

            }, 3000);
        });
    }

    function getCurrentDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd;
        }

        if (mm < 10) {
            mm = '0' + mm;
        }

        today = mm + '/' + dd + '/' + yyyy;
        return today;
    }

    var user_data = {};
         //INICIALIZAR OBJETO AJAX PARA TRAER DATOS DEL SERVIDOR
        $.ajax({
            //PARAMETRIZAR SERVICIO AJAX
            url: '@Url.Action("GetAllUsersJsonAsync", "ReportarIncidentes")',
            type: 'post',
            //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
            beforeSend: function () {
                $('.page-loader-wrapper').fadeIn();
            },
            success: function (response) {
                user_data = response;
                initGrid();
                //OCULTAR LOADER UNA VEZ CARAGADA LA INFORMACIÓN
                $('.page-loader-wrapper').fadeOut();
            },
            //EN CASO DE ERROR, IMPRIMIRLO
            error: function (request, status, error) {
                alert('Error al cargar usuarios Json: ' + request.responseText);
            }
    });

    $(function () {
        $('.datepicker').bootstrapMaterialDatePicker({
            format: 'DD-MM-YYYY',
            clearButton: true,
            weekStart: 1,
            time: false,
            lang: 'es',
            clearText: 'Limipiar',
            cancelText: 'Cancelar'
        });

        $('.timepicker').bootstrapMaterialDatePicker({
            format: 'HH:mm',
            clearButton: true,
            date: false,
            lang: 'es',
            clearText: 'Limipiar',
            cancelText: 'Cancelar'
        });

        $('#NombreProducto').autocomplete({
            //Los datos, que son invocado mediante JQuery ajax
            source: function (request, response) {
                $.getJSON('@Url.Content("~/")' + "ReportarIncidentes/GetProducts", request, function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item,
                            value: item + ""
                        }
                    }));
                });
            }
        });

        $('.page-loader-wrapper').fadeOut();
    });
</script>
<script>
    function AddReporte() {
        var validate = $('#formReporte').validate({
            highlight: function (input) {
                $(input).parents('.form-line').addClass('error');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).parents('.form-line').removeClass('error');
            },
            rules: {
                'TipoIncidente': { valueNotEquals: "0" },
                'IdArea': { valueNotEquals: "0" },
                'IdLinea': { valueNotEquals: "0" },
                'IdCoorSup': { valueNotEquals: "0" },
                'IdRespArea': { valueNotEquals: "0" },
                'IdOpeRes': { valueNotEquals: "0" },
                'IdLidInv': { valueNotEquals: "0" }
            },
            success: function (label, element) {
                label.parent().removeClass('error');
                label.remove();
            },
            invalidHandler: function (form, validator) {

                if (!validator.numberOfInvalids())
                    return;

                $('html, body').animate({
                    scrollTop: $(validator.errorList[0].element).offset().top
                }, 1000);

            },
            ignore: ':disabled,.ignore'
        });

        cmd = [];
        cmd = grid.getData();

        if (cmd.length == 0) {
            swal("Acciones Inmediatas", "Las acciones deben estar diligenciadas", "error");
            console.log('error contramedidas!');
            return false;
        };

        if (!validate.form()) {
            return false;
        }

        //MOSTRAR LOADER
        $('.page-loader-wrapper').fadeIn();

        var form = $('#formReporte')[0];
        var dataString = new FormData(form);

        //ADJUNTAR LISTA DE ACCIONES
        dataString.append('Cmd', JSON.stringify(cmd));

        $.ajax({
            type: "POST",
            url: '@Url.Action("CreateAsync", "ReportarIncidentes")',
            data: dataString,
            success: function (response) {

                $('#mdlExito').modal('toggle');

                //MENSAJE DE CONFIRMACIÓN O ERROR
                if (response.code == 1) {
                    $('#modalMsg').text("Incidente reportado correctamente!");
                }
                else {
                    $('#modalMsg').text("Error al reportar incidente, inténte de nuevo!");
                }
            },
            cache: false,
            contentType: false,
            processData:false
        });

        $('.page-loader-wrapper').fadeOut();
    }


</script>