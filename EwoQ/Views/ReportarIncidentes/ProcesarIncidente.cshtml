@model EwoQ.Models.ReporteIncidentesViewModel

@{
    ViewBag.Title = "Procesar incidente";
}

<!-- Bootstrap Material Datetime Picker Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-material-datetimepicker/css/bootstrap-material-datetimepicker.css" rel="stylesheet" />

<!-- Bootstrap Select Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />

<!-- Jquery UI Css -->
<link href="~/Scripts/Adminbsb/plugins/jquery-ui-1.12.1.autocomplete/jquery-ui.min.css" rel="stylesheet" />

<!-- SlickGrid Css -->
<link href="~/Scripts/Adminbsb/plugins/slickgrid/slick.grid.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/css/jquery-ui.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/examples.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/css/select2.css" rel="stylesheet" />
<!-- SWEETALERT Css -->
<link href="~/Scripts/Adminbsb/plugins/sweetalert/sweetalert.css" rel="stylesheet">
<!-- TAGSINPUT typeahead Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/bootstrap-tagsinput-typeahead.css" rel="stylesheet" />

<style>
    .header:not(.tit) {
        background-color: #009688
    }

    .card .header h2:not(.tit) {
        color: white;
    }

    .form-group .form-control {
        border: 1px solid;
        border-radius: 5px;
        padding: 5px;
    }

    .select2-container {
        top: -3px;
        left: -6px;
    }

        .select2-container .select2-selection--single {
            height: 26px;
        }
</style>

<div class="card js-sweetalert">
    <div class="header tit">
        <h2 class="tit">
            REPORTE DE INCIDENTES QA
        </h2>
        <h2 class="tit">
            NOTIFICACIÓN # @Model.Consecutivo<small>Procesamiento de notificación ™</small>
        </h2>
    </div>
    <div class="body js-sweetalert clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            @using (Html.BeginForm("ProcesarIncidente", "ReportarIncidentes", FormMethod.Post, new { @id = "wizard_validation" }))
            {

                @Html.Hidden("Id", Model.Id)
                <h3>Notificación</h3>
                <section class="clearfix">
                    <div class="card">
                        <div class="header">
                            <h2>
                                Información básica
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.FchApertInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">date_range</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.FchApertInvestigacion, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Seleccione fecha...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.HrApertInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.HrApertInvestigacion, new { htmlAttributes = new { @class = "form-control timepicker selectpick", placeholder = "Seleccione hora...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.HrEvento)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.HrEvento, new { htmlAttributes = new { @class = "form-control timepicker", placeholder = "Seleccione hora...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.FchEntregaInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">date_range</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.FchEntregaInvestigacion, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Seleccione fecha...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.HrEntregaInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.HrEntregaInvestigacion, new { htmlAttributes = new { @class = "form-control timepicker", placeholder = "Seleccione hora...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.TipoIncidente)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">report_problem</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="TipoIncidente" name="TipoIncidente" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.TipoIncidenteList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.Recurrente)</b>
                                    <div class="input-group">
                                        <div class="switch">
                                            <label>
                                                NO
                                                <input name="Recurrente" type="checkbox">
                                                <span class="lever"></span>
                                                SI
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdArea)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">edit_location</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdArea" name="IdArea" data-size="5" data-live-search="true" class="selectpicker show-tick">
                                                @foreach (var item in Model.AreasList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdLinea)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">edit_location</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdLinea" name="IdLinea" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.LineasList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.EtapaProceso)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">rotate_90_degrees_ccw</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.EtapaProceso, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba etapa del proceso...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdCoorSup)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdCoorSup" name="IdCoorSup" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdRespArea)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdRespArea" name="IdRespArea" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdOpeRes)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdOpeRes" name="IdOpeRes" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.OperatingUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <b>@Html.LabelFor(model => model.IdLidInv)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdLidInv" name="IdLidInv" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="header">
                            <h2>
                                Información del producto
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-sm-4">
                                    <b>@Html.LabelFor(model => model.NombreProducto)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">text_format</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.NombreProducto, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese nombre producto...", required = "required" } })

                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.CodigoSAP)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">format_list_numbered</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.CodigoSAP, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese código sap...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.Lote)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">pages</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.Lote, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese lote...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.TiempoLineaParada)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.TiempoLineaParada, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.Toneladas)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">play_for_work</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.Toneladas, new { htmlAttributes = new { @class = "form-control align-center", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.NumCajas)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">play_for_work</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.NumCajas, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.NumPallet)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">layers</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.NumPallet, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.Unidades)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">layers</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.Unidades, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.TamanoFormato)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">layers</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.TamanoFormato, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="header">
                            <h2>
                                Detalles del problema
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DescripcionProblema)
                                        @Html.TextAreaFor(model => model.DescripcionProblema, 4, 0, new { @class = "form-control rounded-10", placeholder = "Escriba aquí la descripción del problema...", required = "required" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AccionesList)
                                        <div id="gridAcciones" style="width:100%;height:300px;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </section>

                <h3>Análisis de causas & 4M</h3>
                <section>
                    <div class="panel panel-default">
                        <div class="panel-heading"><h5><b>AJUSTES BÁSICOS</b></h5></div>
                        <div class="panel-body">
                           
                            <div class="tags">
                                <div class="col-md-12">
                                    <b>Ingrese los nombres de las personas que integran el grupo de trabajo</b>
                                    <br />
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">group</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.EquipoTrabajo, new { htmlAttributes = new { placeholder = "Escriba aquí los nombres..." } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6">                                    
                                    <ul class="list-group">
                                        <li class="list-group-item" style="padding: 10px 15px;">
                                            <div class="input-group" style="margin:5px;">
                                                <span class="bg-green input-group-addon" style="padding:2px;">Nivel 1</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.AreaDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item" style="padding: 10px 15px;">
                                            <div class="input-group" style="margin:5px;">
                                                <span class="bg-green input-group-addon" style="padding:2px;">Nivel 1</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.AreaDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item" style="padding: 10px 15px;">
                                            <div class="input-group" style="margin:5px;">
                                                <span class="bg-green input-group-addon" style="padding:2px;">Nivel 1</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.AreaDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item" style="padding: 10px 15px;">
                                            <div class="input-group" style="margin:5px;">
                                                <span class="bg-green input-group-addon" style="padding:2px;">Nivel 1</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.AreaDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item" style="padding: 10px 15px;">
                                            <div class="input-group" style="margin:5px;">
                                                <span class="bg-green input-group-addon" style="padding:2px;">Nivel 1</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.AreaDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                    </ul>                                  
                                </div>                                                           
                                <div class="col-sm-6">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <b>@Html.LabelFor(model => model.NumAirsweb)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">text_format</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.NumAirsweb, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <b>@Html.LabelFor(model => model.TiempoAirsWeb)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">access_time</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.TiempoAirsWeb, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                </div>
                                            </div>
                                        </div>
                                    </div>                                        
                                </div>
                            </div>   
                        </div>
                    </div>
                    <div class="card">
                        <div class="header">
                            <h2>
                                Información del producto (procesar)
                            </h2>
                        </div>
                        <div class="body">

                        </div>
                    </div>
                </section>

                <h3>Plan de acción</h3>
                <section></section>

                <h3>Verificación y finalización</h3>
                <section></section>
            }
        </div>
    </div>
</div>

<!-- JQuery Steps Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/jquery-steps/jquery.steps.min.js"></script>

<!-- Select Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-select/js/bootstrap-select.min.js"></script>

<!-- Moment Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/momentjs/moment.js"></script>

<!-- Bootstrap Material Datetime Picker Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js"></script>

<!-- Jquery UI Autocomplete -->
<script src="~/Scripts/Adminbsb/plugins/jquery-ui-1.12.1.autocomplete/jquery-ui.min.js"></script>

<!-- Input Mask Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/jquery-inputmask/jquery.inputmask.bundle.js"></script>

<!-- SlickGrid Js -->
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery.event.drag-2.3.0.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.core.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.grid.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.formatters.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.editors.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/firebugx.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery-ui-1.11.3.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery-ui.min.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/select2.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellrangeselector.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellselectionmodel.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellrangedecorator.js"></script>

<!-- SweetAlert Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/sweetalert/sweetalert.min.js"></script>

<!-- TAGSINPUT Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/bootstrap-tagsinput.js"></script>
<!-- TYPEHEAD Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/typeahead.bundle.js"></script>
<!-- Bloodhound Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/bloodhound.js"></script>
<script>
     var idEdit = @Html.Raw(Json.Encode(Model.Id));
    $(function () {
        //Advanced form with validation
        var form = $('#wizard_validation').show();
        form.steps({
            headerTag: 'h3',
            bodyTag: 'section',
            transitionEffect: 'slideLeft',
            labels: {
                next: "Siguiente",
                cancel: "Cancelar",
                current: "Paso actual:",
                pagination: "Paginación",
                finish: "Finalizar",
                previous: "Anterior",
                loading: "Cargando..."
            },
            onInit: function (event, currentIndex) {
                $.AdminBSB.input.activate();

                //Set tab width
                var $tab = $(event.currentTarget).find('ul[role="tablist"] li');
                var tabCount = $tab.length;
                $tab.css('width', (100 / tabCount) + '%');

                //set button waves effect
                setButtonWavesEffect(event);
            },
            onStepChanging: function (event, currentIndex, newIndex) {

                if (currentIndex > newIndex) {
                    return true;
                }


                if (currentIndex < newIndex) {
                    form.find('.body:eq(' + newIndex + ') label.error').remove();
                    form.find('.body:eq(' + newIndex + ') .error').removeClass('error');
                }

                form.validate().settings.ignore = ':disabled,:hidden';

                return form.valid();
                //return true;
            },
            onStepChanged: function (event, currentIndex, priorIndex) {

                setButtonWavesEffect(event);
            },
            onFinishing: function (event, currentIndex) {

                form.validate().settings.ignore = ':disabled,.ignore';
                return form.valid();
                //return true;
            },
            onFinished: function (event, currentIndex) {
                var form = $('#wizard_validation')[0];
                var dataString = new FormData(form);

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ProcesarIncidente", "ReportarIncidentes")',
                    data: dataString,
                    beforeSend: function () {
                        $('.page-loader-wrapper').fadeIn();
                    },
                    success: function (response) {

                        $('#downloadModal').modal('toggle');

                        //MENSAJE DE CONFIRMACIÓN O ERROR
                        if (response.code == 1) {
                            $('#modalMsg').text("Formato creado correctamente!");
                            //window.location = '/ReportarIncidentes/DownloadEwoFile';
                        }
                        else if (response.code == -1) {
                            $('#modalMsg').text("Error al crear formato!" + response.message);
                        }
                        else {
                            $('#modalMsg').text("No se pudo crear formato, intente nuevamente!");
                        }
                    },
                    cache: false,
                    contentType: false,
                    processData: false
                });

                $('.page-loader-wrapper').hide();
            }
        });

        form.validate({
            highlight: function (input) {
                $(input).parents('.form-line').addClass('error');
            },
            unhighlight: function (element, errorClass, validClass) {
                if ($(element).hasClass("error")) {
                    $(element).parents('.form-line').removeClass('error');
                    $(element).removeClass(errorClass).addClass(validClass).tooltipster('close');
                }
            },
            rules: {
                //'confirm': { equalTo: '#password' },
                //'IdPlanta': { valueNotEquals: "0" },
                //'IdTipoLinea': { valueNotEquals: "0" },
                //'IdLinea': { valueNotEquals: "0" },
                //'IdMaquina': { valueNotEquals: "0" },
                //'IdTipoAveria': { valueNotEquals: "0" },
                //'dz_text': { valueNotEquals: "" }
            },
            success: function (label, element) {
                label.parent().removeClass('error');
                label.remove();
            },
            messages: {
                //'IdPlanta': { valueNotEquals: "Debe seleccionar planta..." }
            }
        });

        function setButtonWavesEffect(event) {
            $(event.currentTarget).find('[role="menu"] li a').removeClass('waves-effect');
            $(event.currentTarget).find('[role="menu"] li:not(.disabled) a').addClass('waves-effect');
        }

         //CARGA NOTIFICACIÓN DE INCIDENTE
        $('.datepicker').bootstrapMaterialDatePicker({
            format: 'DD-MM-YYYY',
            clearButton: true,
            weekStart: 1,
            time: false,
            lang: 'es',
            clearText: 'Limipiar',
            cancelText: 'Cancelar'
        });

        $('.timepicker').bootstrapMaterialDatePicker({
            format: 'HH:mm',
            clearButton: true,
            date: false,
            lang: 'es',
            clearText: 'Limipiar',
            cancelText: 'Cancelar'
        });

        //AUTOCOMPLETAR
        $('#NombreProducto').autocomplete({
            //Los datos, que son invocado mediante JQuery ajax
            source: function (request, response) {
                $.getJSON('@Url.Content("~/")' + "ReportarIncidentes/GetProducts", request, function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item,
                            value: item + ""
                        }
                    }));
                });
            }
        });

        //TAGSINPUT GENERATOR
        var names = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('NombresCommpletos'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: '@Url.Content("~/")' + "ReportarIncidentes/GetAllUsers"
            },
            remote: {
                url: '@Url.Content("~/")' + "ReportarIncidentes/GetAllUsers"
            }
        });

        names.initialize();


        $('.tags input:text').tagsinput({
            typeaheadjs: {
                name: 'names',
                displayKey: 'NombresCommpletos',
                valueKey: 'Id',
                source: names.ttAdapter()
            }
        });
    });
</script>

<script>
    //CARGAR DATOS DE INCIDENTES REPORTADOS
    $(function () {
        //CONSULTAR LA BASE DE DATOS
        if (idEdit) {
            //CARGAR LOS CAMPOS PARA SU EDICIÓN
            $.ajax({
                //PARAMETRIZAR SERVICIO AJAX
                url: '@Url.Action("GetEwoAsync", "ReportarIncidentes")',
                type: 'post',
                data: { id: idEdit },
                //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
                beforeSend: function () {
                    $('.page-loader-wrapper').fadeIn();
                },
                success: function (r)
                {
                    console.log(r);
                    $('#TipoIncidente').val(r.TipoIncidente);
                    $('#IdArea').val(r.IdArea);
                    $('#IdLinea').val(r.IdLinea);
                    $('#IdCoorSup').val(r.IdCoorSup);
                    $('#IdRespArea').val(r.IdRespArea);
                    $('#IdOpeRes').val(r.IdOpeRes);
                    $('#IdLidInv').val(r.IdLidInv);
                    $('input[name^="Recurrente"]').prop('checked', r.RecurrenteB);

                    $('select').selectpicker('refresh');
                    $('.page-loader-wrapper').fadeOut();
                },
                //EN CASO DE ERROR, IMPRIMIRLO
                error: function (request, status, error) {
                    alert('Error al generar consultar inncidente reportado para procesamiento: ' + request.responseText);
                }
            });
        }
    });
</script>
<script>
    var cmd = new Array();
    var grid;

    function populateSelect(select, dataSource, addBlank) {
        var index, len, newOption;

        if (addBlank) { select.appendChild(new Option('', '')); }

        $.each(dataSource, function (value, text) {
            newOption = new Option(text.NombresCommpletos, text.Id);
            select.appendChild(newOption);
        });
    };

    function SelectEditor(args) {
        var $input;
        var defaultValue;
        this.keyCaptureList = [Slick.keyCode.UP, Slick.keyCode.DOWN, Slick.keyCode.ENTER];

        this.init = function () {
            $input = $('<select></select>');
            $input.width(args.container.clientWidth + 3);
            populateSelect($input[0], args.column.dataSource, true);
            $input.appendTo(args.container);
            $input.focus().select();

            $input.select2({
                placeholder: '-',
                allowClear: true
            });
        };

        this.destroy = function () {
            $input.select2('destroy');
        };

        this.show = function () {

        };
        this.hide = function () {
            $input.select('results_hide');
        };
        this.focus = function () {
            $input.select2('input_focus');
        };
        this.loadValue = function (item) {
            defaultValue = item[args.column.field];
            $input.val(defaultValue);
            $input[0].defaultValue = defaultValue;
            $input.trigger('change.select2');
        };
        this.serializeValue = function () {
            return $input.val();
        };
        this.applyValue = function (item, state) {
            item[args.column.field] = state;
        }
        this.isValueChanged = function () {
            return (!($input.val() == "" && defaultValue == null)) && ($input.val() != defaultValue);
        };
        this.validate = function () {
            return {
                valid: true,
                msg: null
            };
        };
        this.init();
    }

    function select2Formatter(row, cell, value, columnDef, dataContext) {
        if (value) {
            return columnDef.dataSource.find(x => x.Id === value).NombresCommpletos || '-';
        }
        else {
            return '-';
        }
    }

    function RemoveClick(index) {
        var data = grid.getData();
        data.splice(index, 1);
        grid.setData(data);
        grid.render();
    }

    function initGrid() {
        var columns =
            [
                { id: "titulo", name: "Acción", field: "accion", minWidth: 300, editable: true, editor: Slick.Editors.Text },
                { id: "id_responsable", name: "Responsable", field: "codigo_responsable", minWidth: 200, formatter: select2Formatter, editor: SelectEditor, dataSource: user_data },
                { id: "fecha_compromiso", name: "Fecha de compromiso", field: "fecha_compromiso", minWidth: 130, editor: Slick.Editors.Date },
                { id: "evi_efe", name: "Evidencia/Efectividad", field: "evidencia_efectividad", minWidth: 120, resizable: false, formatter: Slick.Formatters.PercentCompleteBar, editor: Slick.Editors.PercentComplete },
                {
                    id: 'id', name: '#', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deleteSG" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ')">Eliminar</a>';
                    }
                }
            ];

        var options =
            {
                editable: true,
                enableAddRow: true,
                enableCellNavigation: true,
                asyncEditorLoading: false,
                autoEdit: false,
                forceFitColumns: false
            };

        //INICIALIZACIÓN DEL GRID
        var data = [];
        //for (var i = 0; i < 5; i++) {
        //    var d = (data[i] = {});
        //    d["titulo"] = "Elemento " + i + 9;
        //    d["NombresCommpletos"] = "280475b9-58b9-441c-9142-e2acc9c1139b";
        //    d["fecha_compromiso"] = getCurrentDate();
        //    d["evi_efe"] = 0;
        //}

        grid = new Slick.Grid("#gridAcciones", data, columns, options);
        grid.setSelectionModel(new Slick.CellSelectionModel());
        grid.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            grid.invalidateRow(data.length);
            data.push(item);
            grid.updateRowCount();
            grid.render();
        });

        $('#gridAcciones').on('focusout', '.editor-percentcomplete', function () {

            window.setTimeout(function () {

                if (Slick.GlobalEditorLock.isActive())
                    Slick.GlobalEditorLock.commitCurrentEdit();

            }, 5000);
        });


        if (idEdit > 0) {
            //SI SE ESTÁ EDITANDO, CARGAR LOS DATOS
            //LISTA DE ACCIONES
            $.ajax({
                //PARAMETRIZAR SERVICIO AJAX
                url: '@Url.Action("GetAcionsList", "ReportarIncidentes")',
                type: 'post',
                data: { id_ewo: idEdit },
                success: function (r)
                {
                    r.forEach(function (item) {
                        grid.invalidateRow(data.length);
                        data.push(item);
                        grid.updateRowCount();
                        grid.render();
                        console.log('se actualizó grid!');
                    });
                },
                //EN CASO DE ERROR, IMPRIMIRLO
                error: function (request, status, error) {
                    alert('Error al consultar acciones inmediatas: ' + request.responseText);
                }
            });
        }
    }

    function getCurrentDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd;
        }

        if (mm < 10) {
            mm = '0' + mm;
        }

        today = mm + '/' + dd + '/' + yyyy;
        return today;
    }

    var user_data = {};
            //INICIALIZAR OBJETO AJAX PARA TRAER DATOS DEL SERVIDOR
        $.ajax({
            //PARAMETRIZAR SERVICIO AJAX
            url: '@Url.Action("GetAllUsersJsonAsync", "ReportarIncidentes")',
            type: 'post',
            //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
            beforeSend: function () {
                $('.page-loader-wrapper').fadeIn();
            },
            success: function (response) {
                user_data = response;
                initGrid();
                //OCULTAR LOADER UNA VEZ CARAGADA LA INFORMACIÓN
                $('.page-loader-wrapper').fadeOut();
            },
            //EN CASO DE ERROR, IMPRIMIRLO
            error: function (request, status, error) {
                alert('Error al cargar usuarios Json: ' + request.responseText);
            }
    });
</script>