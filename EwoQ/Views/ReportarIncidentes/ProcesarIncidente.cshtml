@model EwoQ.Models.ReporteIncidentesViewModel

@{
    ViewBag.Title = "Procesar incidente";
}

<!-- Bootstrap Material Datetime Picker Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-material-datetimepicker/css/bootstrap-material-datetimepicker.css" rel="stylesheet" />

<!-- Bootstrap Select Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />

<!-- Jquery UI Css -->
<link href="~/Scripts/Adminbsb/plugins/jquery-ui-1.12.1.autocomplete/jquery-ui.min.css" rel="stylesheet" />

<!-- SlickGrid Css -->
<link href="~/Scripts/Adminbsb/plugins/slickgrid/slick.grid.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/css/jquery-ui.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/examples.css" rel="stylesheet" />
<link href="~/Scripts/Adminbsb/plugins/slickgrid/css/select2.css" rel="stylesheet" />
<!-- SWEETALERT Css -->
<link href="~/Scripts/Adminbsb/plugins/sweetalert/sweetalert.css" rel="stylesheet">
<!-- TAGSINPUT typeahead Css -->
<link href="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/bootstrap-tagsinput-typeahead.css" rel="stylesheet" />
@*DROPZONE CUSTOM CSS*@
<link href="~/Scripts/Adminbsb/plugins/dropzone-custom/dropzone.css" rel="stylesheet" />
@*DROPZONE CUSTOM JS*@
<script src="~/Scripts/Adminbsb/plugins/dropzone-custom/dropzone.js"></script>
@* EDITABLE DATATABLE *@
<link href="~/Scripts/Adminbsb/plugins/editable-table/index.css" rel="stylesheet" />
@* GRIDSTACK *@
<link href="~/Scripts/Adminbsb/plugins/gridstack/gridstack.min.css" rel="stylesheet" />

<style>
    .header:not(.tit) {
        background-color: #009688
    }

    .card .header h2:not(.tit) {
        color: white;
    }

    .form-group .form-control {
        border: 1px solid;
        border-radius: 5px;
        padding: 5px;
    }

    .select2-container {
        top: -3px;
        left: -6px;
    }

        .select2-container .select2-selection--single {
            height: 26px;
        }

    .cell-effort-driven {
        text-align: center;
    }

    .zq-header-b {
        background: red;
        color: white;
    }

    .zq-header-a {
        background: green;
        color: white;
    }

    /*EVITAR QUE MATERIALIZE OCULTE CHECK CON SUS ATRUBUTOS*/
    [type="checkbox"]:not(:checked), [type="checkbox"]:checked {
        left: auto;
        opacity: 1;
    }

    .list-group .list-group-item {
        padding: 10px 15px;
    }

        .list-group .list-group-item input {
            float: none;
        }

    .list-group-item .input-group {
        margin: 5px;
    }

    .smlw {
        color: white !important;
    }

    .gray_cube {
        display: block;
        padding: 10px;
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 12px;
    }

    /*TEXTO EN EL DROPZONE*/
    .dropzone .dz-message {
        text-align: center;
        margin: 2em 0;
    }

    /*QUITAR EL COLOR DE FONDO EN COLLAPSE*/
    .full-body .panel-col-teal .panel-body {
        background-color: white;
        color: black;
    }

    .modal-body .sticky {
        display: inline-block;
        height: 200px;
        overflow: auto
    }

    .tbl4M th {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        background-color: #ddd;
        color: #fff;
    }

    .tbl4M {
        border-collapse: collapse;
        width: 100%;
    }


    .tbl4M th {
        padding: 1em .5em;
    }


    .tbl4M tr {
        color: #212121;
    }

    [type="radio"]:not(:checked), [type="radio"]:checked {
        position: static;
        left: -9999px;
        opacity: 0;
        display: none;
    }
</style>

<div class="card js-sweetalert">
    <div class="header tit">
        <h2 class="tit">
            REPORTE DE INCIDENTES QA
        </h2>
        <h2 class="tit">
            NOTIFICACIÓN # @Model.Consecutivo<small>Procesamiento de notificación ™</small>
        </h2>
    </div>
    <div class="body js-sweetalert clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            @using (Html.BeginForm("ProcesarIncidente", "ReportarIncidentes", FormMethod.Post, new { @id = "wizard_validation" }))
            {

                @Html.Hidden("Id", Model.Id)
                <h3>Notificación</h3>
                <section class="clearfix">
                    <div class="card">
                        <div class="header">
                            <h2>
                                Información básica
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.FchApertInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">date_range</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.FchApertInvestigacion, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Seleccione fecha...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.HrApertInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.HrApertInvestigacion, new { htmlAttributes = new { @class = "form-control timepicker selectpick", placeholder = "Seleccione hora...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.HrEvento)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.HrEvento, new { htmlAttributes = new { @class = "form-control timepicker", placeholder = "Seleccione hora...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.FchEntregaInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">date_range</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.FchEntregaInvestigacion, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Seleccione fecha...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.HrEntregaInvestigacion)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.HrEntregaInvestigacion, new { htmlAttributes = new { @class = "form-control timepicker", placeholder = "Seleccione hora...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.TipoIncidente)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">report_problem</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="TipoIncidente" name="TipoIncidente" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.TipoIncidenteList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.Recurrente)</b>
                                    <div class="input-group">
                                        <div class="switch">
                                            <label>
                                                NO
                                                <input name="Recurrente" type="checkbox">
                                                <span class="lever"></span>
                                                SI
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdArea)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">edit_location</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdArea" name="IdArea" data-size="5" data-live-search="true" class="selectpicker show-tick">
                                                @foreach (var item in Model.AreasList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdLinea)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">edit_location</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdLinea" name="IdLinea" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.LineasList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.EtapaProceso)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">rotate_90_degrees_ccw</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.EtapaProceso, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba etapa del proceso...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdCoorSup)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdCoorSup" name="IdCoorSup" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdRespArea)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdRespArea" name="IdRespArea" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <b>@Html.LabelFor(model => model.IdOpeRes)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdOpeRes" name="IdOpeRes" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.OperatingUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <b>@Html.LabelFor(model => model.IdLidInv)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdLidInv" name="IdLidInv" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                Información del producto
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-sm-4">
                                    <b>@Html.LabelFor(model => model.NombreProducto)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">text_format</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.NombreProducto, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese nombre producto...", required = "required" } })

                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.CodigoSAP)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">format_list_numbered</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.CodigoSAP, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese código sap...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.Lote)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">pages</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.Lote, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese lote...", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.TiempoLineaParada)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">access_time</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.TiempoLineaParada, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.Toneladas)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">play_for_work</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.Toneladas, new { htmlAttributes = new { @class = "form-control align-center", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.NumCajas)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">play_for_work</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.NumCajas, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.NumPallet)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">layers</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.NumPallet, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <b>@Html.LabelFor(model => model.Unidades)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">layers</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.Unidades, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <b>@Html.LabelFor(model => model.TamanoFormato)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">layers</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.TamanoFormato, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="header">
                            <h2>
                                Detalles del problema
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DescripcionProblema)
                                        @Html.TextAreaFor(model => model.DescripcionProblema, 4, 0, new { @class = "form-control rounded-10", placeholder = "Escriba aquí la descripción del problema...", required = "required" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AccionesList)
                                        <div id="gridAcciones" style="width:100%;height:300px; margin:0 auto;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <h3>Análisis de causas & 4M</h3>
                <section>
                    <div class="panel panel-default">
                        <div class="panel-heading"><h5><b>AJUSTES BÁSICOS</b></h5></div>
                        <div class="panel-body">

                            <div class="tags">
                                <div class="col-md-12">
                                    <b>Ingrese los nombres de las personas que integran el grupo de trabajo</b>
                                    <br />
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">group</i>
                                        </span>
                                        <div class="form-line">
                                            @Html.EditorFor(model => model.EquipoTrabajo, new { htmlAttributes = new { placeholder = "Escriba aquí los nombres..." } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <ul class="list-group">
                                        @Html.LabelFor(model => model.ArbPerd1)
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-lime input-group-addon" style="padding:2px;">Nivel 1</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.ArbPerd1, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba aquí...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-light-green input-group-addon" style="padding:2px;">Nivel 2</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.ArbPerd2, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba aquí...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-green input-group-addon" style="padding:2px;">Nivel 3</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.ArbPerd3, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba aquí...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-teal input-group-addon" style="padding:2px;">Nivel 4</span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.ArbPerd4, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba aquí...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-indigo input-group-addon" style="padding:2px;">Otro&nbsp;&nbsp;&nbsp;&nbsp;  </span>
                                                <div class="form-line" style="margin-left:5px;">
                                                    @Html.EditorFor(model => model.ArbPerdO, new { htmlAttributes = new { @class = "form-control", placeholder = "Escriba aquí...", required = "required" } })
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-sm-8">
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <b>@Html.LabelFor(model => model.NumAirsweb)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">text_format</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.NumAirsweb, new { htmlAttributes = new { @class = "form-control", placeholder = "ingrese número...", required = "required" } })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4">
                                            <b>@Html.LabelFor(model => model.TiempoAirsWeb)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">access_time</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.TiempoAirsWeb, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4">
                                            <b>@Html.LabelFor(model => model.TiempoInpeccion)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">access_time</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.TiempoInpeccion, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <b>@Html.LabelFor(model => model.CostoIncidente)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">attach_money</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.CostoIncidente, new { htmlAttributes = new { @class = "form-control", required = "required", type = "number", placeholder = "000.000" } })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <b>@Html.LabelFor(model => model.IdDisposicionF)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">restore</i>
                                                </span>
                                                <div class="form-line">
                                                    <select id="IdDisposicionF" name="IdDisposicionF" class="selectpicker show-tick" required>
                                                        @foreach (var item in Model.DisposicionFList)
                                                        {
                                                            <option value="@item.Value">@item.Text</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-2"></div>
                                        <div class="col-md-4">
                                            <b>@Html.LabelFor(model => model.DFToneladas)</b>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="material-icons">play_for_work</i>
                                                </span>
                                                <div class="form-line">
                                                    @Html.EditorFor(model => model.DFToneladas, new { htmlAttributes = new { @class = "form-control align-center", required = "required" } })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Multiple Items To Be Open -->
                    <div class="row clearfix">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="row clearfix">
                                <div class="col-xs-12 ol-sm-12 col-md-12 col-lg-12">
                                    <div class="panel-group full-body" id="accordion_19" role="tablist" aria-multiselectable="true">
                                        <div class="panel panel-col-teal">
                                            <div class="panel-heading" role="tab" id="headingOne_19">
                                                <h4 class="panel-title">
                                                    <a role="button" data-toggle="collapse" href="#collapseOne_19" aria-expanded="true" aria-controls="collapseOne_19">
                                                        <i class="material-icons">filter_5</i> GENJITSU |
                                                        <small class="smlw"> (Verificar los hechos)</small>
                                                    </a>
                                                </h4>
                                            </div>
                                            <div id="collapseOne_19" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne_19">
                                                <div class="panel-body">
                                                    <div id="gridGenjitsu" style="width:100%;height:300px; margin:0 auto;"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel panel-col-teal">
                                            <div class="panel-heading" role="tab" id="headingTwo_19">
                                                <h4 class="panel-title">
                                                    <a class="collapsed" role="button" data-toggle="collapse" href="#collapseTwo_19" aria-expanded="false" aria-controls="collapseTwo_19">
                                                        <i class="material-icons">filter_5</i> GENRI |
                                                        <small class="smlw">(Referirse a la teoría)</small>
                                                    </a>
                                                </h4>
                                            </div>
                                            <div id="collapseTwo_19" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingTwo_19">
                                                <div class="panel-body">
                                                    <div id="gridGenri" style="width:100%;height:300px; margin:0 auto;"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel panel-col-teal">
                                            <div class="panel-heading" role="tab" id="headingThree_19">
                                                <h4 class="panel-title">
                                                    <a class="collapsed" role="button" data-toggle="collapse" href="#collapseThree_19" aria-expanded="false" aria-controls="collapseThree_19">
                                                        <i class="material-icons">filter_5</i>GENSOKU |
                                                        <small class="smlw">(Seguir el estándar)</small>
                                                    </a>
                                                </h4>
                                            </div>
                                            <div id="collapseThree_19" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingThree_19">
                                                <div class="panel-body">
                                                    <div id="gridGensoku" style="width:100%;height:300px; margin:0 auto;"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                Investigación en piso (5G)
                                <small class="smlw"> En base al enfoque 5G utiliza el siguiente check list para enunciar los factores o variable relacionados al fenómeno a analizar. Chequea las actividades que realizaste.</small>
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="table-responsive-md" style="margin-top:40px">
                                        <table class="table table-bordered">
                                            <tbody>
                                                <tr>
                                                    <td style="width:50%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                GEMBA:
                                                            </strong>
                                                            (Ir al lugar donde se produce el problema)
                                                        </div>
                                                    </td>
                                                    <td style="width:50%">
                                                        <div class="gray_cube">
                                                            <div class="switch">
                                                                <label>NOK<input type="checkbox" name="GembaOk"><span class="lever"></span>OK</label>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:50%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                GEMBUTSU:
                                                            </strong>
                                                            (Examinar la evidencia)
                                                        </div>
                                                    </td>
                                                    <td style="width:50%">
                                                        <div class="gray_cube">
                                                            <div class="switch">
                                                                <label>NOK<input type="checkbox" name="GembutsuOk"><span class="lever"></span>OK</label>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:50%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                GENJITSU:
                                                            </strong>
                                                            (Verificar hechos y escenarios)
                                                        </div>
                                                    </td>
                                                    <td style="width:50%">
                                                        <div class="gray_cube">
                                                            <div class="switch">
                                                                <label>NOK<input type="checkbox" name="GenjitsuOk"><span class="lever"></span>OK</label>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <b>ANEXAR SKETCH DE LA EVIDENCIA DEL PROBLEMA</b>
                                    <div class="dropzone" id="dropzone5G">
                                        <div class="dz-default dz-message gray_cube">
                                            <div class="drag-icon-cph">
                                                <i class="material-icons">touch_app</i>
                                            </div>
                                            <h3>Arrastre imágenes aquí o presione click para cargar...</h3>
                                            <em>(<strong>1</strong> imágen permitida.)</em>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                5W+1H
                                <small class="smlw">(basado en las 5Gs)</small>
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="gray_cube">
                                        <b>@Html.LabelFor(model => model.DescripcionProblema)</b>
                                        @Html.TextAreaFor(model => model.DescripcionProblema, 2, 0, new { @class = "form-control rounded-10", placeholder = "Escriba aquí la descripción del problema...", @readonly = "readonly", style = "background-color: white;" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="table-responsive-md">
                                        <table class="table table-bordered ">
                                            <tbody>
                                                <tr>
                                                    <td style="width:40%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                QUÉ ( WHAT)?
                                                            </strong>
                                                            ¿Qué producto/parte tiene el problema?
                                                        </div>
                                                    </td>
                                                    <td style="width:60%">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.QueDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:40%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                DÓNDE (WHERE)?
                                                            </strong>
                                                            ¿Dónde está viendo el problema? (Área, línea, equipo, componente, ubicación)
                                                        </div>
                                                    </td>
                                                    <td style="width:60%">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.DondeDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:40%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                CUÁNDO (WHEN)?
                                                            </strong>
                                                            ¿Cuándo se presenta el problema? (p.ej. Arranque/Producción Normal/Después de un cambio/Tiempo, etc.)
                                                        </div>
                                                    </td>
                                                    <td style="width:60%">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.CuandoDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:40%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                QUIÉN (WHO)?
                                                            </strong>
                                                            ¿Quién esta relacionado con el problema?
                                                        </div>
                                                    </td>
                                                    <td style="width:60%">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.QuienDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:40%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                CUÁL (WHICH)?
                                                            </strong>
                                                            ¿Cuál es la tendencia del problema?¿Es puntual o presenta algún patrón?
                                                        </div>
                                                    </td>
                                                    <td style="width:60%">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.CualDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:40%">
                                                        <div class="gray_cube">
                                                            <strong>
                                                                CÓMO (HOW)?
                                                            </strong>
                                                            ¿Cómo se afectan los resultados o el proceso al compararlo con lo normal o deseado?
                                                        </div>
                                                    </td>
                                                    <td style="width:60%">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.ComoDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:100%" colspan="2">
                                                        <hr />
                                                        <div class="gray_cube">
                                                            <strong>
                                                                HOW + WHAT + WHERE + WHEN + WHICH + WHO = FENOMENO
                                                            </strong>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="width:100%" colspan="2">
                                                        <div class="form-group" style="margin-bottom:0;">
                                                            @Html.TextAreaFor(model => model.FenomenoDesc, 0, 40, new { @class = "form-control rounded-10", placeholder = "...", style = "width:100%; max-width:100%;", required = "required" })
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <b>ANEXE SKETCH DEL FENÓMENO</b>
                                    <div class="dropzone" id="dropzoneFNM">
                                        <div class="dz-default dz-message gray_cube">
                                            <div class="drag-icon-cph">
                                                <i class="material-icons">touch_app</i>
                                            </div>
                                            <h3>Arrastre imágenes aquí o presione click para cargar...</h3>
                                            <em>(<strong>1</strong> imágen permitida.)</em>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card clearfix" style="width:100%;">
                        <div class="header" style="background-color:#009688">
                            <h2>
                                ANÁLISIS POR QUÉ - POR QUÉ
                            </h2>
                            <button id="btnAddxQue" type="button" class="btn btn-default waves-effect btn-circle m-t-10 m-r-10" data-toggle="tooltip" data-placement="botton" title="Agregar POR QUÉ...">
                                <i class="material-icons">playlist_add</i>
                            </button>
                            <button id="btnDeleteLastxQ" type="button" class="btn btn-default waves-effect btn-circle m-t-10 m-r-10" data-toggle="tooltip" data-placement="botton" title="Quitar último POR QUÉ...">
                                <i class="material-icons">delete_sweep</i>
                            </button>
                            <button id="btnDeleteAllxQue" type="button" class="btn btn-default waves-effect btn-circle m-t-10 m-r-10" data-toggle="tooltip" data-placement="botton" title="Eliminar todos los registros...">
                                <i class="material-icons">clear_all</i>
                            </button>
                        </div>
                        <div class="body">
                            <div class="gray_cube">
                                <b>FENÓMENO</b>
                                @Html.TextAreaFor(model => model.FenomenoDescT, 2, 0, new { @class = "form-control rounded-10", @readonly = "readonly", style = "background-color: white;" })
                            </div>
                            <hr />
                            <table id="tblPorque" class="table table-striped table-bordered ignore" style="width:100%;">
                                <thead>
                                    <tr>
                                        <th>1 - Por qué?</th>
                                        <th>2 - Por qué?</th>
                                        <th>3 - Por qué?</th>
                                        <th>4 - Por qué?</th>
                                        <th>5 - Por qué?</th>
                                        <th>Contramedidas</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>

                    <div class="card" style="width:100%;">
                        <div class="header" style="background-color:#009688">
                            <h2>
                                Análisis 4M
                                <small class="smlw">Asistente para responder las preguntas formuladas para determinar su peso</small>
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-1"></div>
                                <div class="col-md-10">
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-green input-group-addon" style="padding:2px;">MANO DE OBRA / MAN </span>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Subtotal</h5>
                                                    @Html.EditorFor(model => model.ManoObra4M, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Total</h5>
                                                    @Html.EditorFor(model => model.ManoObra4MTotal, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <a style="margin-left:5px;" class="waves-effect btn bg-green" href="javascript:loadManQs(1);">Iniciar</a>
                                                <div class="form-line" style="margin-left:15px; width:35%">
                                                    <h5 style="text-align:center">Descripción</h5>
                                                    @Html.EditorFor(model => model.ManoObra4MDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "...", style = "text-align:center;" } })
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-md-1"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-1"></div>
                                <div class="col-md-10">
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-green input-group-addon" style="padding:2px;">MATERIAL / MATERIAL</span>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Subtotal</h5>
                                                    @Html.EditorFor(model => model.Material4M, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Total</h5>
                                                    @Html.EditorFor(model => model.Material4MTotal, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <a style="margin-left:5px;" class="waves-effect btn bg-green" href="javascript:loadManQs(2);">Iniciar</a>
                                                <div class="form-line" style="margin-left:15px; width:35%">
                                                    <h5 style="text-align:center">Descripción</h5>
                                                    @Html.EditorFor(model => model.Material4MDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "...", style = "text-align:center;" } })
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-md-1"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-1"></div>
                                <div class="col-md-10">
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-green input-group-addon" style="padding:2px;">MAQUINA / MACHINE</span>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Subtotal</h5>
                                                    @Html.EditorFor(model => model.Maquina4M, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Total</h5>
                                                    @Html.EditorFor(model => model.Maquina4MTotal, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <a style="margin-left:5px;" class="waves-effect btn bg-green" href="javascript:loadManQs(3);">Iniciar</a>
                                                <div class="form-line" style="margin-left:15px; width:35%">
                                                    <h5 style="text-align:center">Descripción</h5>
                                                    @Html.EditorFor(model => model.Maquina4MDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "...", style = "text-align:center;" } })
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-md-1"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-1"></div>
                                <div class="col-md-10">
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <div class="input-group">
                                                <span class="bg-green input-group-addon" style="padding:2px;">MÉTODO / METHOD</span>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Subtotal</h5>
                                                    @Html.EditorFor(model => model.Metodo4M, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <div class="form-line" style="margin-left:5px; width:20%">
                                                    <h5 style="text-align:center">Total</h5>
                                                    @Html.EditorFor(model => model.Metodo4MTotal, new { htmlAttributes = new { @class = "form-control", placeholder = "% 0", required = "required", style = "text-align:center;", @readonly = "readonly" } })
                                                </div>
                                                <a style="margin-left:5px;" class="waves-effect btn bg-green" href="javascript:loadManQs(4);">Iniciar</a>
                                                <div class="form-line" style="margin-left:15px; width:35%">
                                                    <h5 style="text-align:center">Descripción</h5>
                                                    @Html.EditorFor(model => model.Metodo4MDesc, new { htmlAttributes = new { @class = "form-control", placeholder = "...", style = "text-align:center;" } })
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-md-1"></div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                TOP FIVE FOR ZERO
                                <small class="smlw">Es un programa Global de Unilever que tiene como objetivo eliminar las causas que pueden generar Incidentes de Calidad en el Mercado  ( A B C).</small>
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <table class="table table-bordered table-hover center">
                                        <tr>
                                            @foreach (var item in Model.TopFiveForZeroList)
                                            {

                                                <td>
                                                    <input name="grpTFFZ" type="radio" class="with-gap" id="tffz_@item.id" />
                                                    <label for="tffz_@item.id">@item.descripcion</label>
                                                </td>

                                            }
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <h3>Plan de acción</h3>
                <section>
                    <div class="card">
                        <div class="header">
                            <h2>
                                <span class="spnMethod"></span>Before
                                <small class="smlw">Zero Questions</small>
                            </h2>
                        </div>
                        <div class="body">
                            <table id="tblZeroBefore" class="table table-hover table-bordered tblZeroBefore">
                                <thead class="bg-teal">
                                    <tr>
                                        <th>Pregunta</th>
                                        <th>1 Punto</th>
                                        <th>3 Puntos</th>
                                        <th>5 Puntos</th>
                                        <th class="bg-red">BEFORE (pts)</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                                <tfoot></tfoot>
                            </table>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                Plan de acción
                                <small class="smlw">Listado de acciones</small>
                            </h2>
                        </div>
                        <div class="body">
                            <div id="gridPlanAccion" style="width:100%;height:300px; margin:0 auto;"></div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                <span class="spnMethod"></span>After
                                <small class="smlw">Zero Questions</small>
                            </h2>
                        </div>
                        <div class="body">
                            <table id="tblZeroAfter" class="table table-hover table-bordered tblZeroAfter">
                                <thead class="bg-teal">
                                    <tr>
                                        <th>Pregunta</th>
                                        <th>1 Punto</th>
                                        <th>3 Puntos</th>
                                        <th>5 Puntos</th>
                                        <th class="bg-green">AFTER (pts)</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                                <tfoot></tfoot>
                            </table>
                        </div>
                    </div>
                </section>

                <h3>Verificación y finalización</h3>
                <section>

                    <div class="card">
                        <div class="body clearfix">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ComentariosResoluciones)
                                    @Html.TextAreaFor(model => model.ComentariosResoluciones, 4, 0, new { @class = "form-control rounded-10", placeholder = "Escriba aquí los comentarios...", required = "required" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="header">
                            <h2>
                                NOMBRES Y FIRMAS
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-6">
                                    <b>@Html.LabelFor(model => model.IdCoorProd)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdCoorProd" name="IdCoorProd" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <b>@Html.LabelFor(model => model.IdJefCal)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdJefCal" name="IdJefCal" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <b>@Html.LabelFor(model => model.IdGerProd)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdGerProd" name="IdGerProd" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <b>@Html.LabelFor(model => model.IdGerCal)</b>
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="material-icons">person</i>
                                        </span>
                                        <div class="form-line" style="border:none;">
                                            <select id="IdGerCal" name="IdGerCal" data-size="5" data-live-search="true" class="selectpicker show-tick" required>
                                                @foreach (var item in Model.AdminUsersList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="card">
                        <div class="header">
                            <h2>
                                CIERRE DE INCIDENTE O NO INCONFORMIDAD
                            </h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="gray_cube">
                                        <p style="text-align:center; font-weight: bold;">Estado del incidente o no inconformidad</p>
                                        <hr />
                                        <div class="switch" style="margin: 0 auto; display:table; ">
                                            <label>Abierto<input type="checkbox" name="chkCerrado" disabled><span class="lever"></span>Cerrado</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="gray_cube">
                                        <p style="text-align:center; font-weight: bold;">Puntaje de Zero Questions (After)</p>
                                        <hr />
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-striped active" id="pgbAfter" role="progressbar" aria-valuenow="5" aria-valuemin="0"
                                                 aria-valuemax="100" style="width: 5%">
                                                <p id="statePercent" style="text-align:center;">5%</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="mdlExito" tabindex="-1" role="dialog" aria-labelledby="mdlExito-label">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @*<h4 class="modal-title" id="mdlExito-label"></h4>*@
                <h4 class="label label-info modal-title" style="font-size:100%;"></h4>
            </div>
            <div class="modal-body">
                <div class="sticky" style="border: 1px solid #00BCD4; width: 100%; height: 400px; overflow: auto;">
                    <table id="tblManoObra" class="table table-hover table-bordered ignore tbl4M">
                        <thead>
                            <tr>
                                <th>Pregunta</th>
                                <th>Yes</th>
                                <th>No</th>
                                <th>NA</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <table id="tblMaterial" class="table table-hover table-bordered ignore tbl4M">
                        <thead>
                            <tr>
                                <th>Pregunta</th>
                                <th>Yes</th>
                                <th>No</th>
                                <th>NA</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <table id="tblMaquina" class="table table-hover table-bordered ignore tbl4M">
                        <thead>
                            <tr>
                                <th>Pregunta</th>
                                <th>Yes</th>
                                <th>No</th>
                                <th>NA</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <table id="tblMetodo" class="table table-hover table-bordered ignore tbl4M">
                        <thead>
                            <tr>
                                <th>Pregunta</th>
                                <th>Yes</th>
                                <th>No</th>
                                <th>NA</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>               
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="calculateValues()">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<!-- JQuery Steps Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/jquery-steps/jquery.steps.min.js"></script>

<!-- Select Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-select/js/bootstrap-select.min.js"></script>

<!-- Moment Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/momentjs/moment.js"></script>

<!-- Bootstrap Material Datetime Picker Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js"></script>

<!-- Jquery UI Autocomplete -->
<script src="~/Scripts/Adminbsb/plugins/jquery-ui-1.12.1.autocomplete/jquery-ui.min.js"></script>

<!-- Input Mask Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/jquery-inputmask/jquery.inputmask.bundle.js"></script>

<!-- SlickGrid Js -->
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery.event.drag-2.3.0.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.core.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.grid.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.formatters.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/slick.editors.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/firebugx.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery-ui-1.11.3.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/jquery-ui.min.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/lib/select2.js"></script>

<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellrangeselector.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellselectionmodel.js"></script>
<script src="~/Scripts/Adminbsb/plugins/slickgrid/plugins/slick.cellrangedecorator.js"></script>

<!-- SweetAlert Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/sweetalert/sweetalert.min.js"></script>

<!-- TAGSINPUT Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/bootstrap-tagsinput.js"></script>
<!-- TYPEHEAD Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/typeahead.bundle.js"></script>
<!-- Bloodhound Plugin Js -->
<script src="~/Scripts/Adminbsb/plugins/bootstrap-tagsinput/bloodhound.js"></script>
@* EDITABLE DATATABLE JS *@
<script src="~/Scripts/Adminbsb/plugins/editable-table/mindmup-editabletable.js"></script>
@* LODASH JS *@ 
<script src="~/Scripts/Adminbsb/plugins/lodash/lodash.min.js"></script>
@* GRIDSTACK JS *@
<script src="~/Scripts/Adminbsb/plugins/gridstack/gridstack.min.js"></script>

<script>
     var idEdit = @Html.Raw(Json.Encode(Model.Id));
    var myDropzone1;
    var myDropzone2;
    //lista de acciones inmediatas para enviar
    var listAccInm = new Array();
    //lista de genjitsu para enviar
    var listGenj = new Array();
    //lista de genri para enviar
    var listGenr = new Array();
    //lista de gesoku para enviar
    var listGens = new Array();
    //lista de por que para enviar
    var listPorq = new Array();
    //lista de zero before para enviar
    var listBefo = new Array();
    //lista de zero after para enviar
    var listAfte = new Array();
    //lista de plan de acción para enviar
    var listPlan = new Array();

    var grid;
    var gridGenjitsu;
    var gridGenri;
    var gridGensoku;
    var gridPlanAccion;
    var manos = new Array();
    var mats = new Array();
    var maqs = new Array();
    var metds = new Array();
    var areas_data = @Html.Raw(Json.Encode(Model.AreasList));
    var firstTime = true, firstTimeOne = true, changedQstn = true;
    
    var options =
        {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            asyncEditorLoading: false,
            autoEdit: false,
            forceFitColumns: false
        };

    function calculateValues() {
        $('#mdlExito').modal('toggle');

        manos = [];
        mats = [];
        maqs = [];
        metds = [];

        //CREAR DATOS DE TABLA EN ARREGLO
        $("#tblManoObra TBODY TR").each(function (a,b) {
            var row = $(this);
            var pregunta = {};

            pregunta.id = row.find("TD").eq(0).html();
            pregunta.descripcion = row.find("TD").eq(1).html();
            pregunta.option = "2";  //NA        

            var radios = document.getElementsByName('option_' + pregunta.id + '');
            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    // do whatever you want with the checked radio
                    pregunta.option = radios[i].value;

                    // only one radio can be logically checked, don't check the rest
                    break;
                }
            }           
            manos.push(pregunta);
        });

        //CREAR DATOS DE TABLA EN ARREGLO
        $("#tblMaterial TBODY TR").each(function (a, b) {
            var row = $(this);
            var pregunta = {};

            pregunta.id = row.find("TD").eq(0).html();
            pregunta.descripcion = row.find("TD").eq(1).html();
            pregunta.option = "2";  //NA        

            var radios = document.getElementsByName('option_' + pregunta.id + '');
            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    // do whatever you want with the checked radio
                    pregunta.option = radios[i].value;

                    // only one radio can be logically checked, don't check the rest
                    break;
                }
            }
            mats.push(pregunta);
        });

        //CREAR DATOS DE TABLA EN ARREGLO
        $("#tblMaquina TBODY TR").each(function (a, b) {
            var row = $(this);
            var pregunta = {};

            pregunta.id = row.find("TD").eq(0).html();
            pregunta.descripcion = row.find("TD").eq(1).html();
            pregunta.option = "2";  //NA        

            var radios = document.getElementsByName('option_' + pregunta.id + '');
            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    // do whatever you want with the checked radio
                    pregunta.option = radios[i].value;

                    // only one radio can be logically checked, don't check the rest
                    break;
                }
            }
            maqs.push(pregunta);
        });

        //CREAR DATOS DE TABLA EN ARREGLO
        $("#tblMetodo TBODY TR").each(function (a, b) {
            var row = $(this);
            var pregunta = {};

            pregunta.id = row.find("TD").eq(0).html();
            pregunta.descripcion = row.find("TD").eq(1).html();
            pregunta.option = "2";  //NA        

            var radios = document.getElementsByName('option_' + pregunta.id + '');
            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    // do whatever you want with the checked radio
                    pregunta.option = radios[i].value;

                    // only one radio can be logically checked, don't check the rest
                    break;
                }
            }
            metds.push(pregunta);
        });

        //CALCULO PARA PREGUNTAS DE MANO DE OBRA
        var cntM1 = _.countBy(manos, 'option');
        var ttlM1 = parseInt(cntM1['1']) + parseInt(cntM1['0']);
        var divM1;
        if (ttlM1) {
            divM1 = _.divide(cntM1['1'], ttlM1) * 100;
        }
        else {
            if (parseInt(cntM1['1'])>0) {
                divM1 = 100;
            }
            else {
                divM1 = 0;
            }            
        }        
        var perM1 = _.floor(divM1, 1);
        $('#ManoObra4M').val('%' + perM1);

        //CALCULO PARA PREGUNTAS DE MATERIALES
        var cntM2 = _.countBy(mats, 'option');
        var ttlM2 = parseInt(cntM2['1']) + parseInt(cntM2['0']);
        var divM2;
        if (ttlM2) {
            divM2 = _.divide(cntM2['1'], ttlM2) * 100;
        }
        else {
            if (parseInt(cntM2['1']) > 0) {
                divM2 = 100;
            }
            else {
                divM2 = 0;
            }
        }
        var perM2 = _.floor(divM2, 1);
        $('#Material4M').val('%' + perM2);

        //CALCULO PARA PREGUNTAS DE MAQUINAS
        var cntM3 = _.countBy(maqs, 'option');
        var ttlM3 = parseInt(cntM3['1']) + parseInt(cntM3['0']);
        var divM3;
        if (ttlM3) {
            divM3 = _.divide(cntM3['1'], ttlM3) * 100;
        }
        else {
            if (parseInt(cntM3['1']) > 0) {
                divM3 = 100;
            }
            else {
                divM3 = 0;
            }
        }
        var perM3 = _.floor(divM3, 1);
        $('#Maquina4M').val('%' + perM3);


        //CALCULO PARA PREGUNTAS DE METODO
        var cntM4 = _.countBy(metds, 'option');
        var ttlM4 = parseInt(cntM4['1']) + parseInt(cntM4['0']);
        var divM4;
        if (ttlM4) {
            divM4 = _.divide(cntM4['1'], ttlM4) * 100;
        }
        else {
            if (parseInt(cntM4['1']) > 0) {
                divM4 = 100;
            }
            else {
                divM4 = 0;
            }
        }
        var perM4 = _.floor(divM4, 1);
        $('#Metodo4M').val('%' + perM4);

        //CALCULAR PORCENTAJE TOTAL POR GRUPO
        var yesM1 = isNum(cntM1['1']);
        var yesM2 = isNum(cntM2['1']);
        var yesM3 = isNum(cntM3['1']);
        var yesM4 = isNum(cntM4['1']);
        var allYes = yesM1 + yesM2 + yesM3 + yesM4;
                
        var divTM1 = _.divide(yesM1, allYes) * 100;
        var divTM2 = _.divide(yesM2, allYes) * 100;
        var divTM3 = _.divide(yesM3, allYes) * 100;
        var divTM4 = _.divide(yesM4, allYes) * 100;

        var perTM1 = _.floor(divTM1, 1);
        var perTM2 = _.floor(divTM2, 1);
        var perTM3 = _.floor(divTM3, 1);
        var perTM4 = _.floor(divTM4, 1);
                
        $('#ManoObra4MTotal').val('%' + perTM1);
        $('#Material4MTotal').val('%' + perTM2);
        $('#Maquina4MTotal').val('%' + perTM3);
        $('#Metodo4MTotal').val('%' + perTM4);
    }

    function isNum(num) {
        if (isNaN(num)) {
            return 0;
        }
        else {
            return num;
        }
    }

    function loadZeroQuestions()
    {

        //OBTENER EL 'M' CON MAYOR PUNTAJE
        //CONVERTIR TODOS LOS VALORES A NUMEROS
        var manObra = parseInt($('#ManoObra4MTotal').val().replace('%', ''));
        var material = parseInt($('#Material4MTotal').val().replace('%', ''));
        var maquina = parseInt($('#Maquina4MTotal').val().replace('%', ''));
        var metodo = parseInt($('#Metodo4MTotal').val().replace('%', ''));

        //ASIGNAR LAS CANTIDADES OBTENIDAS A SUS RESPECTIVOS ID'S DE LA BASE DE DATOS        
        var mapV = new Map();
        mapV.set(manObra, 27);
        mapV.set(material, 26);
        mapV.set(maquina, 24);
        mapV.set(metodo, 25);

        //obtener el mayor valor entre todas las cantidades
        var maxM = Math.max(manObra, material, maquina, metodo);
        //de ese mayor valor, obtener el id
        var maxMId = mapV.get(maxM);
        
        //OBTENER REGISTROS
        $.ajax({
            //PARAMETRIZAR SERVICIO AJAX
            url: '@Url.Action("GetZeroQuestions", "ReportarIncidentes")',
            type: 'post',
            data: { id_tipom: maxMId },
            //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
            beforeSend: function () {
                $('.page-loader-wrapper').fadeIn();
            },
            success: function (r)
            {                
                //establecer encabezado de la tabla con el metodo seleccionado
                $('.spnMethod').text(r[0].DescTipoM+' - ');
                //AGREGAR NUEVOS REGISTROS                
                //BORRAR ITEMS DE LA TABLE 
                $("#tblZeroBefore,#tblZeroAfter").find("tr:gt(0)").remove();
                //relenar la tabla de before con las preguntas
                r.forEach(function (val, ind) {
                    $("#tblZeroBefore").find('tbody').fadeIn(300, function () {
                        $(this).append($('<tr>')
                            .append($('<td style="display:none;">').append(val.Id))
                            .append($('<td>').append('<b>'+val.Pregunta+'</b>'))
                            .append($('<td>').append('<input type="radio" id="r1_' + val.Id + '" name="option_' + val.Id + '" value="1" class="with-gap radio-col-cyan" > <label for="r1_' + val.Id + '">' + val.Responses[0].Respuesta+'</label>'))
                            .append($('<td>').append('<input type="radio" id="r3_' + val.Id + '" name="option_' + val.Id + '" value="3" class="with-gap radio-col-cyan"> <label for="r3_' + val.Id + '">' + val.Responses[1].Respuesta +'</label>'))
                            .append($('<td>').append('<input type="radio" id="r5_' + val.Id + '" name="option_' + val.Id + '" value="5" class="with-gap radio-col-cyan"> <label for="r5_' + val.Id + '">' + val.Responses[2].Respuesta + '</label>'))
                            .append($('<td style="text-align:center;" class="bg-red ptsBef" id="pt_'+val.Id+'">').append('0')));
                    });
                });

                //relenar la tabla de after con las preguntas
                r.forEach(function (val, ind) {
                    $("#tblZeroAfter").find('tbody').fadeIn(300, function () {
                        $(this).append($('<tr>')
                            .append($('<td style="display:none;">').append(val.Id))
                            .append($('<td>').append('<b>' + val.Pregunta + '</b>'))
                            .append($('<td>').append('<input type="radio" id="r1a_' + val.Id + '" name="optiona_' + val.Id + '" value="1" class="with-gap radio-col-cyan" > <label for="r1a_' + val.Id + '">' + val.Responses[0].Respuesta + '</label>'))
                            .append($('<td>').append('<input type="radio" id="r3a_' + val.Id + '" name="optiona_' + val.Id + '" value="3" class="with-gap radio-col-cyan"> <label for="r3a_' + val.Id + '">' + val.Responses[1].Respuesta + '</label>'))
                            .append($('<td>').append('<input type="radio" id="r5a_' + val.Id + '" name="optiona_' + val.Id + '" value="5" class="with-gap radio-col-cyan"> <label for="r5a_' + val.Id + '">' + val.Responses[2].Respuesta + '</label>'))
                            .append($('<td style="text-align:center;" class="bg-green ptsAft" id="pta_' + val.Id + '">').append('0')));
                    });
                });

                //agregar pie de tabla para mostrar el total de los puntos
                $("#tblZeroBefore").find('tfoot').append($('<tr>')
                    .append($('<td colspan="4" style="text-align:center;" class="font-20 bg-teal">').append('Total'))
                    .append($('<td style="text-align:center;" class="font-15 bg-red" id="befTotal">').append('0%')));

                $("#tblZeroAfter").find('tfoot').append($('<tr>')
                    .append($('<td colspan="4" style="text-align:center;" class="font-20 bg-teal">').append('Total'))
                    .append($('<td style="text-align:center;" class="font-15 bg-green" id="aftTotal">').append('0%')));
                                       
                $('.page-loader-wrapper').fadeOut();
            },
            //EN CASO DE ERROR, IMPRIMIRLO
            error: function (request, status, error) {
                alert('Error al consultar preguntas 4M (24): ' + request.responseText);
            }
        });  
        
    }

    function loadManQs(opt) {

        $('#mdlExito').modal('toggle');

        switch (opt) {
            case 1:
                //FIJAR TITULO
                $('.modal-title').text("MANO DE OBRA / MAN");
                //FIJAR ID
                var id4M = 24;
                //VERIFICAR SI HAY REGISTROS EN LA TABLA
                var rowCount = $('#tblManoObra tr').length;
                //SI ESTÁ VACÍA LA TABLA, INCLUYENDO EL ENCABEZADO
                if (rowCount == 1) {
                    //OBTENER REGISTROS
                    $.ajax({
                        //PARAMETRIZAR SERVICIO AJAX
                        url: '@Url.Action("Get4MQuestionsByType", "ReportarIncidentes")',
                        type: 'post',
                        data: { id: id4M },
                        //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
                        beforeSend: function () {
                            $('.page-loader-wrapper').fadeIn();
                        },
                        success: function (r)
                        {                            
                            //AGREGAR NUEVOS REGISTROS
                            r.forEach(function (val, ind) {
                                $("#tblManoObra").find('tbody').fadeIn(300, function () {
                                    $(this).append($('<tr>')
                                        .append($('<td style="display:none;">').append(val.id))
                                        .append($('<td>').append(val.descripcion))
                                        .append($('<td>').append('<input type="radio" id="rYes_' + val.id + '" name="option_' + val.id + '" value="1" class="with-gap radio-col-cyan" > <label for="rYes_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNo_' + val.id + '" name="option_' + val.id + '" value="0" class="with-gap radio-col-cyan"> <label for="rNo_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNa_' + val.id + '" name="option_' + val.id + '" value="2" class="with-gap radio-col-cyan"> <label for="rNa_' + val.id + '"></label>')));
                                });
                            });
                                       
                            $('.page-loader-wrapper').fadeOut();
                        },
                        //EN CASO DE ERROR, IMPRIMIRLO
                        error: function (request, status, error) {
                            alert('Error al consultar preguntas 4M (24): ' + request.responseText);
                        }
                    });                    
                }  

                //MOSTAR TABLA                            
                $('#tblManoObra').show();
                $('#tblMaterial').hide();
                $('#tblMaquina').hide();
                $('#tblMetodo').hide();
            break;

            case 2:
                //FIJAR TITULO
                $('.modal-title').text("MATERIAL / MATERIAL");
                //FIJAR ID
                var id4M = 25;
                //VERIFICAR SI HAY REGISTROS EN LA TABLA
                var rowCount = $('#tblMaterial tr').length;
                //SI ESTÁ VACÍA LA TABLA
                if (rowCount == 1) {
                    //OBTENER REGISTROS
                    $.ajax({
                        //PARAMETRIZAR SERVICIO AJAX
                        url: '@Url.Action("Get4MQuestionsByType", "ReportarIncidentes")',
                        type: 'post',
                        data: { id: id4M },
                        //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
                        beforeSend: function () {
                            $('.page-loader-wrapper').fadeIn();
                        },
                        success: function (r)
                        {
                            //AGREGAR NUEVOS REGISTROS
                            r.forEach(function (val, ind) {
                                $("#tblMaterial").find('tbody').fadeIn(300, function () {
                                    $(this).append($('<tr>')
                                        .append($('<td style="display:none;">').append(val.id))
                                        .append($('<td>').append(val.descripcion))
                                        .append($('<td>').append('<input type="radio" id="rYes_' + val.id + '" name="option_' + val.id + '" value="1" class="with-gap radio-col-cyan" > <label for="rYes_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNo_' + val.id + '" name="option_' + val.id + '" value="0" class="with-gap radio-col-cyan"> <label for="rNo_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNa_' + val.id + '" name="option_' + val.id + '" value="2" class="with-gap radio-col-cyan"> <label for="rNa_' + val.id + '"></label>')));
                                });
                            });
                                       
                            $('.page-loader-wrapper').fadeOut();
                        },
                        //EN CASO DE ERROR, IMPRIMIRLO
                        error: function (request, status, error) {
                            alert('Error al consultar preguntas 4M (25): ' + request.responseText);
                        }
                    });                    
                }     

                //MOSTAR TABLA                            
                $('#tblManoObra').hide();
                $('#tblMaterial').show();
                $('#tblMaquina').hide();
                $('#tblMetodo').hide();
                break;

            case 3:
                //FIJAR TITULO
                $('.modal-title').text("MAQUINA / MACHINE");
                //FIJAR ID
                var id4M = 26;
                //VERIFICAR SI HAY REGISTROS EN LA TABLA
                var rowCount = $('#tblMaquina tr').length;
                //SI ESTÁ VACÍA LA TABLA
                if (rowCount == 1) {
                    //OBTENER REGISTROS
                    $.ajax({
                        //PARAMETRIZAR SERVICIO AJAX
                        url: '@Url.Action("Get4MQuestionsByType", "ReportarIncidentes")',
                        type: 'post',
                        data: { id: id4M },
                        //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
                        beforeSend: function () {
                            $('.page-loader-wrapper').fadeIn();
                        },
                        success: function (r)
                        {
                            //AGREGAR NUEVOS REGISTROS
                            r.forEach(function (val, ind) {
                                $("#tblMaquina").find('tbody').fadeIn(300, function () {
                                    $(this).append($('<tr>')
                                        .append($('<td style="display:none;">').append(val.id))
                                        .append($('<td>').append(val.descripcion))
                                        .append($('<td>').append('<input type="radio" id="rYes_' + val.id + '" name="option_' + val.id + '" value="1" class="with-gap radio-col-cyan" > <label for="rYes_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNo_' + val.id + '" name="option_' + val.id + '" value="0" class="with-gap radio-col-cyan"> <label for="rNo_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNa_' + val.id + '" name="option_' + val.id + '" value="2" class="with-gap radio-col-cyan"> <label for="rNa_' + val.id + '"></label>')));
                                });
                            });
                                       
                            $('.page-loader-wrapper').fadeOut();
                        },
                        //EN CASO DE ERROR, IMPRIMIRLO
                        error: function (request, status, error) {
                            alert('Error al consultar preguntas 4M (26): ' + request.responseText);
                        }
                    });                    
                }     

                //MOSTAR TABLA                            
                $('#tblManoObra').hide();
                $('#tblMaterial').hide();
                $('#tblMaquina').show();
                $('#tblMetodo').hide();
                break;

            case 4:
                //FIJAR TITULO
                $('.modal-title').text("MÉTODO / METHOD");
                //FIJAR ID
                var id4M = 27;
                //VERIFICAR SI HAY REGISTROS EN LA TABLA
                var rowCount = $('#tblMetodo tr').length;
                //SI ESTÁ VACÍA LA TABLA
                if (rowCount == 1) {
                    //OBTENER REGISTROS
                    $.ajax({
                        //PARAMETRIZAR SERVICIO AJAX
                        url: '@Url.Action("Get4MQuestionsByType", "ReportarIncidentes")',
                        type: 'post',
                        data: { id: id4M },
                        //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
                        beforeSend: function () {
                            $('.page-loader-wrapper').fadeIn();
                        },
                        success: function (r)
                        {
                            //AGREGAR NUEVOS REGISTROS
                            r.forEach(function (val, ind) {
                                $("#tblMetodo").find('tbody').fadeIn(300, function () {
                                    $(this).append($('<tr>')
                                        .append($('<td style="display:none;">').append(val.id))
                                        .append($('<td>').append(val.descripcion))
                                        .append($('<td>').append('<input type="radio" id="rYes_' + val.id + '" name="option_' + val.id + '" value="1" class="with-gap radio-col-cyan" > <label for="rYes_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNo_' + val.id + '" name="option_' + val.id + '" value="0" class="with-gap radio-col-cyan"> <label for="rNo_' + val.id + '"></label>'))
                                        .append($('<td>').append('<input type="radio" id="rNa_' + val.id + '" name="option_' + val.id + '" value="2" class="with-gap radio-col-cyan"> <label for="rNa_' + val.id + '"></label>')));
                                });
                            });
                                       
                            $('.page-loader-wrapper').fadeOut();
                        },
                        //EN CASO DE ERROR, IMPRIMIRLO
                        error: function (request, status, error) {
                            alert('Error al consultar preguntas 4M (26): ' + request.responseText);
                        }
                    });                    
                }     

                //MOSTAR TABLA                            
                $('#tblManoObra').hide();
                $('#tblMaterial').hide();
                $('#tblMaquina').hide();
                $('#tblMetodo').show();
            break;
        }

        //permitir seleccionar tabla de nuevo
        changedQstn = true;
    }

    function showSweetAlert(titulo, mensaje, tipo) {
        swal(titulo, mensaje, tipo);
        //$('.showSweetAlert h2').addClass('tit');
    }
</script>
<script>
    //tipos de acciones para el plan de acción
    var tiposAcciones = {
        C: 'Correctiva',
        P: 'Preventiva',
        M: 'Mejora'
    };

    //funciones para grid de plan de acción
    //publicar lista de tipos de acciones
    function PopulateSelectTipo(select, dataSource, addBlank) {
        var index, len, newOption;
        if (addBlank) { select.appendChild(new Option('', '')); }
        $.each(dataSource, function (value, text) {
            newOption = new Option(text, value);
            select.appendChild(newOption);
        });
    };
    //personalización de editor para el tipo de acción
    function SelectEditorTipo(args) {
        var $input;
        var defaultValue;
        this.keyCaptureList = [Slick.keyCode.UP, Slick.keyCode.DOWN, Slick.keyCode.ENTER];

        this.init = function () {
            $input = $('<select></select>');
            $input.width(args.container.clientWidth + 3);
            PopulateSelectTipo($input[0], args.column.dataSource, true);
            $input.appendTo(args.container);
            $input.focus().select();

            $input.select2({
                placeholder: '-',
                allowClear: true
            });
        };

        this.destroy = function () {
            $input.select2('destroy');
        };

        this.show = function () {

        };
        this.hide = function () {
            $input.select('results_hide');
        };
        this.focus = function () {
            $input.select2('input_focus');
        };
        this.loadValue = function (item) {
            defaultValue = item[args.column.field];
            $input.val(defaultValue);
            $input[0].defaultValue = defaultValue;
            $input.trigger('change.select2');
        };
        this.serializeValue = function () {
            return $input.val();
        };
        this.applyValue = function (item, state) {
            item[args.column.field] = state;
        }
        this.isValueChanged = function () {
            return (!($input.val() == "" && defaultValue == null)) && ($input.val() != defaultValue);
        };
        this.validate = function () {
            return {
                valid: true,
                msg: null
            };
        };
        this.init();
    }
    //formateador de el tipo de acción
    function select2FormatterTipo(row, cell, value, columnDef, dataContext) {
        return columnDef.dataSource[value] || '-';
    }

    //funciones para grid de acciones inmediatas
    //publicar lista de responsables
    function populateSelect(select, dataSource, addBlank) {
        var index, len, newOption;

        if (addBlank) { select.appendChild(new Option('', '')); }

        $.each(dataSource, function (value, text) {
            newOption = new Option(text.NombresCommpletos, text.Id);
            select.appendChild(newOption);
        });
    };       
    //personalización del editor para el responsable
    function SelectEditor(args) {
        var $input;
        var defaultValue;
        this.keyCaptureList = [Slick.keyCode.UP, Slick.keyCode.DOWN, Slick.keyCode.ENTER];

        this.init = function () {
            $input = $('<select></select>');
            $input.width(args.container.clientWidth + 3);
            populateSelect($input[0], args.column.dataSource, true);
            $input.appendTo(args.container);
            $input.focus().select();

            $input.select2({
                placeholder: '-',
                allowClear: true
            });
        };

        this.destroy = function () {
            $input.select2('destroy');
        };

        this.show = function () {

        };
        this.hide = function () {
            $input.select('results_hide');
        };
        this.focus = function () {
            $input.select2('input_focus');
        };
        this.loadValue = function (item) {
            defaultValue = item[args.column.field];
            $input.val(defaultValue);
            $input[0].defaultValue = defaultValue;
            $input.trigger('change.select2');
        };
        this.serializeValue = function () {
            return $input.val();
        };
        this.applyValue = function (item, state) {
            item[args.column.field] = state;
        }
        this.isValueChanged = function () {
            return (!($input.val() == "" && defaultValue == null)) && ($input.val() != defaultValue);
        };
        this.validate = function () {
            return {
                valid: true,
                msg: null
            };
        };
        this.init();
    }    
    //formateador de la lista de responsables
    function select2Formatter(row, cell, value, columnDef, dataContext) {
        if (value) {
            return columnDef.dataSource.find(x => x.Id === value).NombresCommpletos || '-';
        }
        else {
            return '-';
        }
    }
    //remover la acción recién creada
    function RemoveClick(index, ind) {
        if (ind == 0) {
            var data = grid.getData();
            data.splice(index, 1);
            grid.setData(data);
            grid.render();
        }
        if (ind == 1) {
            var data = gridGenjitsu.getData();
            data.splice(index, 1);
            gridGenjitsu.setData(data);
            gridGenjitsu.render();
        }
        if (ind == 2) {
            var data = gridGenri.getData();
            data.splice(index, 1);
            gridGenri.setData(data);
            gridGenri.render();
        }
        if (ind == 3) {
            var data = gridGensoku.getData();
            data.splice(index, 1);
            gridGensoku.setData(data);
            gridGensoku.render();
        }
        if (ind == 4) {
            var data = gridPlanAccion.getData();
            data.splice(index, 1);
            gridPlanAccion.setData(data);
            gridPlanAccion.render();
        }
    }

    //funciones para area en el grid de plan de acción
    //publicar lista de areas
    function populateSelectArea(select, dataSource, addBlank) {
        var index, len, newOption;

        if (addBlank) { select.appendChild(new Option('', '')); }

        $.each(dataSource, function (value, text) {
            newOption = new Option(text.Text, text.Value);
            select.appendChild(newOption);
        });
    };
    //personalización del editor para el responsable
    function SelectEditorArea(args) {
        var $input;
        var defaultValue;
        this.keyCaptureList = [Slick.keyCode.UP, Slick.keyCode.DOWN, Slick.keyCode.ENTER];

        this.init = function () {
            $input = $('<select></select>');
            $input.width(args.container.clientWidth + 3);
            populateSelectArea($input[0], args.column.dataSource, true);
            $input.appendTo(args.container);
            $input.focus().select();

            $input.select2({
                placeholder: '-',
                allowClear: true
            });
        };

        this.destroy = function () {
            $input.select2('destroy');
        };

        this.show = function () {

        };
        this.hide = function () {
            $input.select('results_hide');
        };
        this.focus = function () {
            $input.select2('input_focus');
        };
        this.loadValue = function (item) {
            defaultValue = item[args.column.field];
            $input.val(defaultValue);
            $input[0].defaultValue = defaultValue;
            $input.trigger('change.select2');
        };
        this.serializeValue = function () {
            return $input.val();
        };
        this.applyValue = function (item, state) {
            item[args.column.field] = state;
        }
        this.isValueChanged = function () {
            return (!($input.val() == "" && defaultValue == null)) && ($input.val() != defaultValue);
        };
        this.validate = function () {
            return {
                valid: true,
                msg: null
            };
        };
        this.init();
    }
    //formateador de la lista de responsables
    function select2FormatterArea(row, cell, value, columnDef, dataContext) {
        if (value) {
            return columnDef.dataSource.find(x => x.Value === value).Text || '-';
        }
        else {
            return '-';
        }
    }
    //remover la acción recién creada

    //inicializar grid
    function initGrid() {
        var columns =
            [
                { id: "titulo", name: "Acción", field: "accion", minWidth: 300, editable: true, editor: Slick.Editors.Text },
                { id: "id_responsable", name: "Responsable", field: "codigo_responsable", minWidth: 200, formatter: select2Formatter, editor: SelectEditor, dataSource: user_data },
                { id: "fecha_compromiso", name: "Fecha de compromiso", field: "fecha_compromiso", minWidth: 130, editor: Slick.Editors.Date },
                { id: "evi_efe", name: "Evidencia/Efectividad", field: "evidencia_efectividad", minWidth: 120, resizable: false, formatter: Slick.Formatters.PercentCompleteBar, editor: Slick.Editors.PercentComplete },
                {
                    id: 'id', name: '#', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deleteSG" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ',0)">Eliminar</a>';
                    }
                }
            ];

        //INICIALIZACIÓN DEL GRID
        var data = [];

        //for (var i = 0; i < 5; i++) {
        //    var d = (data[i] = {});
        //    d["titulo"] = "Elemento " + i + 9;
        //    d["NombresCommpletos"] = "280475b9-58b9-441c-9142-e2acc9c1139b";
        //    d["fecha_compromiso"] = getCurrentDate();
        //    d["evi_efe"] = 0;
        //}

        grid = new Slick.Grid("#gridAcciones", data, columns, options);
        grid.setSelectionModel(new Slick.CellSelectionModel());
        grid.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            grid.invalidateRow(data.length);
            data.push(item);
            grid.updateRowCount();
            grid.render();
        });
                
        $('#gridAcciones').on('focusout', '.editor-percentcomplete', function () {

            window.setTimeout(function () {

                if (Slick.GlobalEditorLock.isActive())
                    Slick.GlobalEditorLock.commitCurrentEdit();

            }, 5000);
        });


        if (idEdit > 0) {
            //SI SE ESTÁ EDITANDO, CARGAR LOS DATOS
            //LISTA DE ACCIONES
            $.ajax({
                //PARAMETRIZAR SERVICIO AJAX
                url: '@Url.Action("GetAcionsList", "ReportarIncidentes")',
                type: 'post',
                data: { id_ewo: idEdit },
                success: function (r)
                {
                    r.forEach(function (item) {
                        grid.invalidateRow(data.length);
                        data.push(item);
                        grid.updateRowCount();
                        grid.render();
                        console.log('sg!');
                    });
                },
                //EN CASO DE ERROR, IMPRIMIRLO
                error: function (request, status, error) {
                    alert('Error al consultar acciones inmediatas: ' + request.responseText);
                }
            });
        }
    }

    function initGridGens() {
        var columnsGenjitsu =
            [
                { id: "condicion", name: "Condición", field: "accion", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "condicion_ideal", name: "Condición ideal", field: "condicion_ideal", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "check", name: "Check", field: "check", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "como", name: "¿Cómo?", field: "como", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "ok", name: "OK / NOK", field: "ok", minWidth: 100, cssClass: "cell-effort-driven", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox },
                {
                    id: 'id', name: '#', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deleteGjt" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ',1)">Eliminar</a>';
                    }
                }
            ];

        var columnsGenri =
            [
                { id: "condicion", name: "Condición", field: "accion", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "condicion_ideal", name: "Condición ideal", field: "condicion_ideal", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "check", name: "Check", field: "check", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "como", name: "¿Cómo?", field: "como", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "ok", name: "OK / NOK", field: "ok", minWidth: 100, cssClass: "cell-effort-driven", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox },
                {
                    id: 'id', name: '#', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deleteGnr" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ',2)">Eliminar</a>';
                    }
                }
            ];

        var columnsGensoku =
            [
                { id: "condicion", name: "Condición", field: "accion", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "condicion_ideal", name: "Condición ideal", field: "condicion_ideal", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "check", name: "Check", field: "check", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "como", name: "¿Cómo?", field: "como", minWidth: 200, editable: true, editor: Slick.Editors.LongText },
                { id: "ok", name: "OK / NOK", field: "ok", minWidth: 100, cssClass: "cell-effort-driven", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox },
                {
                    id: 'id', name: '#', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deleteGnsk" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ',3)">Eliminar</a>';
                    }
                }
            ];

        var dataGenjitsu = [];
        var dataGenri = [];
        var dataGensoku = [];

        gridGenjitsu = new Slick.Grid("#gridGenjitsu", dataGenjitsu, columnsGenjitsu, options);
        gridGenjitsu.setSelectionModel(new Slick.CellSelectionModel());
        gridGenjitsu.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            gridGenjitsu.invalidateRow(dataGenjitsu.length);
            dataGenjitsu.push(item);
            gridGenjitsu.updateRowCount();
            gridGenjitsu.render();
        });

        gridGenri = new Slick.Grid("#gridGenri", dataGenri, columnsGenri, options);
        gridGenri.setSelectionModel(new Slick.CellSelectionModel());
        gridGenri.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            gridGenri.invalidateRow(dataGenri.length);
            dataGenri.push(item);
            gridGenri.updateRowCount();
            gridGenri.render();
        });

        gridGensoku = new Slick.Grid("#gridGensoku", dataGensoku, columnsGensoku, options);
        gridGensoku.setSelectionModel(new Slick.CellSelectionModel());
        gridGensoku.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            gridGensoku.invalidateRow(dataGensoku.length);
            dataGensoku.push(item);
            gridGensoku.updateRowCount();
            gridGensoku.render();
        });
    }

    function initGridPlanAccion() {
        var columnsPlanAccion =
            [
                { id: "tipo_accion", name: "Tipo", field: "tipo_accion", minWidth: 130, formatter: select2FormatterTipo, editor: SelectEditorTipo, dataSource: tiposAcciones },
                { id: "contramedida", name: "Contramedida", field: "contramedida", minWidth: 220, editable: true, editor: Slick.Editors.LongText },
                { id: "capex", name: "Requiere Capex?", field: "capex", minWidth: 150, cssClass: "cell-effort-driven", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox },
                { id: "antes", name: "Antes", field: "antes", minWidth: 100, editable: true, editor: Slick.Editors.Text },
                { id: "despues", name: "Después", field: "despues", minWidth: 100, editable: true, editor: Slick.Editors.Text },
                { id: "pokayoke", name: "Pokayoke", field: "pokayoke", minWidth: 150, editable: true, editor: Slick.Editors.Text },                
                { id: "fecha", name: "F. compromiso", field: "fecha", minWidth: 130, editor: Slick.Editors.Date },
                { id: "id_area", name: "Área", field: "id_area", minWidth: 200, formatter: select2FormatterArea, editor: SelectEditorArea, dataSource: areas_data },
                { id: "id_responsable", name: "Responsable", field: "codigo_responsable", minWidth: 200, formatter: select2Formatter, editor: SelectEditor, dataSource: user_data },
                {
                    id: 'id', name: 'acciones', field: 'id', formatter: function (index, c, id, def, datactx) {
                        return '<a id="deletePA" class="btn btn-primary" style="padding:2px;" onclick="RemoveClick(' + index + ',4)">Eliminar</a>';
                    }
                }
            ];
            

        var dataPlanAccion = [];

        gridPlanAccion = new Slick.Grid("#gridPlanAccion", dataPlanAccion, columnsPlanAccion, options);
        gridPlanAccion.setSelectionModel(new Slick.CellSelectionModel());
        gridPlanAccion.onAddNewRow.subscribe(function (e, args) {
            var item = args.item;
            gridPlanAccion.invalidateRow(dataPlanAccion.length);
            dataPlanAccion.push(item);
            gridPlanAccion.updateRowCount();
            gridPlanAccion.render();
        });     

        //poner color al encabezado de una columna especifica
        var headers = $('#gridPlanAccion .slick-header-columns').children();
        $(headers[3]).addClass('zq-header-b');
        $(headers[4]).addClass('zq-header-a');

        //quitar primer elemento del array 'seleccione area...'
        areas_data.shift();
    }

    function getCurrentDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd;
        }

        if (mm < 10) {
            mm = '0' + mm;
        }

        today = mm + '/' + dd + '/' + yyyy;
        return today;
    }

    var user_data = {};
    //INICIALIZAR OBJETO AJAX PARA TRAER DATOS DEL SERVIDOR
    $.ajax({
        //PARAMETRIZAR SERVICIO AJAX
        url: '@Url.Action("GetAllUsersJsonAsync", "ReportarIncidentes")',
        type: 'post',
        //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
        beforeSend: function () {
            $('.page-loader-wrapper').fadeIn();
        },
        success: function (response) {
            user_data = response;
            initGrid();
            //OCULTAR LOADER UNA VEZ CARAGADA LA INFORMACIÓN
            $('.page-loader-wrapper').fadeOut();
        },
        //EN CASO DE ERROR, IMPRIMIRLO
        error: function (request, status, error) {
            alert('Error al cargar usuarios Json: ' + request.responseText);
        }
    });
</script>
<script>
    $(function () {
        Dropzone.autoDiscover = false;
        //Advanced form with validation
        var form = $('#wizard_validation').show();
        form.steps({
            headerTag: 'h3',
            bodyTag: 'section',
            transitionEffect: 'slideLeft',
            labels: {
                next: "Siguiente",
                cancel: "Cancelar",
                current: "Paso actual:",
                pagination: "Paginación",
                finish: "Finalizar",
                previous: "Anterior",
                loading: "Cargando..."
            },
            onInit: function (event, currentIndex) {
                $.AdminBSB.input.activate();

                //Set tab width
                var $tab = $(event.currentTarget).find('ul[role="tablist"] li');
                var tabCount = $tab.length;
                $tab.css('width', (100 / tabCount) + '%');

                //set button waves effect
                setButtonWavesEffect(event);
            },
            onStepChanging: function (event, currentIndex, newIndex) {

                if (currentIndex > newIndex) {
                    return true;
                }

                if (currentIndex < newIndex) {
                    form.find('.body:eq(' + newIndex + ') label.error').remove();
                    form.find('.body:eq(' + newIndex + ') .error').removeClass('error');
                }

                //validación de datos antes de cambiar la pestaña
                if (currentIndex == 0) {

                    //asignar registros de las acciones inmediatas
                    listAccInm = [];
                    listAccInm = grid.getData();

                    //validar acciones inmediatas
                    if (listAccInm.length == 0) {
                        showSweetAlert("Acciones inmediatas", "Debe cargar las acciones inmediatas", "error");
                        return false;
                    }                                        
                }

                if (currentIndex == 1) {

                    //asignar registros de la pestaña 2
                    listGenj = [];
                    listGenj = gridGenjitsu.getData();

                    listGenr = [];
                    listGenr = gridGenri.getData();

                    listGens = [];
                    listGens = gridGensoku.getData();
                                        
                    //validar listas de la pestaña 2
                    if (listGenj.length == 0) {
                        //showSweetAlert("INVESTIGACIÓN EN PISO", "Debe cargar la información Genjitsu", "error");
                        //return false;
                    }

                    if (listGenr.length == 0) {
                        //showSweetAlert("INVESTIGACIÓN EN PISO", "Debe cargar la información Genri", "error");
                        //return false;
                    }

                    if (listGens.length == 0) {
                        //showSweetAlert("INVESTIGACIÓN EN PISO", "Debe cargar la información Gensoku", "error");
                        //return false;
                    }
                                       
                    //VALIDAR QUE LOS POR QUÉ ESTÉN DILIGENCIADOS                    
                    //CAPTURAR RESGISTROS DE LA TABLA
                    listPorq = [];
                    $("#tblPorque TBODY TR").each(function () {
                        var row = $(this);
                        var porque = {};
                        porque.porque_1 = row.find("TD").eq(0).html();
                        porque.porque_2 = row.find("TD").eq(1).html();
                        porque.porque_3 = row.find("TD").eq(2).html();
                        porque.porque_4 = row.find("TD").eq(3).html();
                        porque.porque_5 = row.find("TD").eq(4).html();
                        porque.contramedida = row.find("TD").eq(5).html();

                        listPorq.push(porque);
                    });

                    if (listPorq.length == 0) {
                        //if (!$('#GembaDesc').val() || !$('#GembutsuDesc').val() || !$('#GenjitsuDesc').val()) {
                            //showSweetAlert("ANÁLISIS POR QUÉ", "Debe diligenciar los registros de por qué", "error");
                            //return false;
                        //}
                    };


                    //validar imagenes
                    //imagen 1
                    if (myDropzone1.files.length == 0) {
                        //showSweetAlert("Investigación en piso (5G)", "Debe cargar la imágen de la evidencia del problema", "error");
                        //return false;
                    }

                    //imagen 2
                    if (myDropzone2.files.length == 0) {
                        //showSweetAlert("5W+1H", "Debe cargar la imágen del fenómeno", "error");
                        //return false;
                    }
                }

                if (currentIndex == 2) {
                    //VALIDAR BEFORE                    
                    //CAPTURAR RESGISTROS DE LA TABLA
                    listBefo = [];
                    $("#tblZeroBefore TBODY TR").each(function () {
                        var row = $(this);
                        var beforeQ = {};
                        beforeQ.id = row.find("TD").eq(0).html();
                        beforeQ.pregunta = row.find("TD").eq(1).html();
                        beforeQ.p1 = row.find("TD").eq(2).html();
                        beforeQ.p3 = row.find("TD").eq(3).html();
                        beforeQ.p5 = row.find("TD").eq(4).html();
                        beforeQ.puntos = row.find("TD").eq(5).html();

                        listBefo.push(beforeQ);
                    });


                    //flag para determinar si hay alguna sin reponder
                    var anyZeroB = false; 
                    listBefo.forEach(function myfunction(i, v) {
                        if (i.puntos == 0) {
                            anyZeroB = true;
                        }
                    });
                                        
                    if (anyZeroB) {
                        //showSweetAlert("ZERO QUESTIONS", "Debe responder todas las preguntas BEFORE", "error");
                        //return false;
                    }


                    //VALIDAR BEFORE                    
                    //CAPTURAR RESGISTROS DE LA TABLA
                    listAfte = [];
                    $("#tblZeroAfter TBODY TR").each(function () {
                        var row = $(this);
                        var afterQ = {};
                        afterQ.id = row.find("TD").eq(0).html();
                        afterQ.pregunta = row.find("TD").eq(1).html();
                        afterQ.p1 = row.find("TD").eq(2).html();
                        afterQ.p3 = row.find("TD").eq(3).html();
                        afterQ.p5 = row.find("TD").eq(4).html();
                        afterQ.puntos = row.find("TD").eq(5).html();

                        listAfte.push(afterQ);
                    });
                    
                    //flag para determinar si hay alguna sin reponder
                    var anyZeroA = false;
                    listAfte.forEach(function myfunction(i, v) {
                        if (i.puntos == 0) {
                            anyZeroA = true;
                        }
                    });

                    if (anyZeroA) {
                        //showSweetAlert("ZERO QUESTIONS", "Debe responder todas las preguntas AFTER", "error");
                        //return false;
                    }

                    //validar plan de acción
                    listPlan = [];
                    listPlan = gridPlanAccion.getData();

                    //validar listas 
                    if (listPlan.length == 0) {
                        showSweetAlert("PLAN DE ACCIÓN", "Debe cargar la información del plan de acción", "error");
                        return false;
                    }
                }

                form.validate().settings.ignore = ':disabled,:hidden';


                //confirmar los cambios de todos los slickgrid
                if (Slick.GlobalEditorLock.isActive())
                    Slick.GlobalEditorLock.commitCurrentEdit();
                //return form.valid();
                return true;
            },
            onStepChanged: function (event, currentIndex, priorIndex) {

                if (currentIndex == 1) {
                    if (firstTimeOne) {
                        initGridGens();

                        firstTimeOne = false;
                    }
                }

                if (currentIndex == 2) {
                    if (firstTime) {
                        loadZeroQuestions();
                        initGridPlanAccion();

                        changedQstn = false;
                        firstTime = false;
                    }              

                    if (changedQstn) {
                        loadZeroQuestions();

                        changedQstn = false;
                    }
                }

                setButtonWavesEffect(event);
            },
            onFinishing: function (event, currentIndex) {

                form.validate().settings.ignore = ':disabled,.ignore';
                //return form.valid();
                return true;
            },
            onFinished: function (event, currentIndex) {
                var form = $('#wizard_validation')[0];
                var dataString = new FormData(form);

                //espacio para adjuntar listas y campos especiales
                dataString.append('ListAccInm', JSON.stringify(listAccInm));
                dataString.append('ListGenj', JSON.stringify(listGenj));
                dataString.append('ListGenr', JSON.stringify(listGenr));
                dataString.append('ListGens', JSON.stringify(listGens));
                dataString.append('ListPorq', JSON.stringify(listPorq));
                dataString.append('ListBefo', JSON.stringify(listBefo));
                dataString.append('ListAfte', JSON.stringify(listAfte));
                dataString.append('ListPlan', JSON.stringify(listPlan));

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ProcesarIncidente", "ReportarIncidentes")',
                    data: dataString,
                    beforeSend: function () {
                        $('.page-loader-wrapper').fadeIn();
                    },
                    success: function (response) {

                        $('#downloadModal').modal('toggle');

                        //MENSAJE DE CONFIRMACIÓN O ERROR
                        if (response.code == 1) {
                            $('#modalMsg').text("Formato creado correctamente!");
                            //window.location = '/ReportarIncidentes/DownloadEwoFile';
                        }
                        else if (response.code == -1) {
                            $('#modalMsg').text("Error al crear formato!" + response.message);
                        }
                        else {
                            $('#modalMsg').text("No se pudo crear formato, intente nuevamente!");
                        }
                    },
                    cache: false,
                    contentType: false,
                    processData: false
                });

                $('.page-loader-wrapper').hide();
            }
        });

        form.validate({
            highlight: function (input) {
                $(input).parents('.form-line').addClass('error');
            },
            unhighlight: function (element, errorClass, validClass) {
                if ($(element).hasClass("error")) {
                    $(element).parents('.form-line').removeClass('error');
                    $(element).removeClass(errorClass).addClass(validClass).tooltipster('close');
                }
            },
            rules: {
                //'confirm': { equalTo: '#password' },
                //'IdPlanta': { valueNotEquals: "0" },
                //'IdTipoLinea': { valueNotEquals: "0" },
                //'IdLinea': { valueNotEquals: "0" },
                //'IdMaquina': { valueNotEquals: "0" },
                //'IdTipoAveria': { valueNotEquals: "0" },
                //'dz_text': { valueNotEquals: "" }
            },
            success: function (label, element) {
                label.parent().removeClass('error');
                label.remove();
            },
            messages: {
                //'IdPlanta': { valueNotEquals: "Debe seleccionar planta..." }
            }
        });

        function setButtonWavesEffect(event) {
            $(event.currentTarget).find('[role="menu"] li a').removeClass('waves-effect');
            $(event.currentTarget).find('[role="menu"] li:not(.disabled) a').addClass('waves-effect');
        }

         //CARGA NOTIFICACIÓN DE INCIDENTE
        $('.datepicker').bootstrapMaterialDatePicker({
            format: 'DD-MM-YYYY',
            clearButton: true,
            weekStart: 1,
            time: false,
            lang: 'es',
            clearText: 'Limipiar',
            cancelText: 'Cancelar'
        });

        $('.timepicker').bootstrapMaterialDatePicker({
            format: 'HH:mm',
            clearButton: true,
            date: false,
            lang: 'es',
            clearText: 'Limipiar',
            cancelText: 'Cancelar'
        });

        //AUTOCOMPLETAR
        $('#NombreProducto').autocomplete({
            //Los datos, que son invocado mediante JQuery ajax
            source: function (request, response) {
                $.getJSON('@Url.Content("~/")' + "ReportarIncidentes/GetProducts", request, function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item,
                            value: item + ""
                        }
                    }));
                });
            }
        });

        //TAGSINPUT GENERATOR
        var names = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('NombresCommpletos'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: '@Url.Content("~/")' + "ReportarIncidentes/GetAllUsers"
            },
            remote: {
                url: '@Url.Content("~/")' + "ReportarIncidentes/GetAllUsers"
            }
        });

        names.initialize();


        $('.tags input:text').tagsinput({
            typeaheadjs: {
                name: 'names',
                displayKey: 'NombresCommpletos',
                valueKey: 'NombresCommpletos',
                source: names.ttAdapter()
            }
        });

        //INICIALIZAR DROPZONE PARA LAS IMAGENES 1
        myDropzone1 = new Dropzone("div#dropzone5G", {
            autoProcessQueue: false,
            acceptedFiles: 'image/*',
            addRemoveLinks: true,
            dictRemoveFile: 'Remover archivo',
            maxFiles:1,
            url: '@Url.Content("~/")' + "Home/CreateKpi"
        });

        //INICIALIZAR DROPZONE PARA LAS IMAGENES 2
        myDropzone2 = new Dropzone("div#dropzoneFNM", {
            autoProcessQueue: false,
            acceptedFiles: 'image/*',
            addRemoveLinks: true,
            dictRemoveFile: 'Remover archivo',
            maxFiles:1,
            url: '@Url.Content("~/")' + "Home/CreateKpi"
        });

        $('#QueDesc').change(fenomenoChange);
        $('#DondeDesc').change(fenomenoChange);
        $('#CuandoDesc').change(fenomenoChange);
        $('#QuienDesc').change(fenomenoChange);
        $('#CualDesc').change(fenomenoChange);
        $('#ComoDesc').change(fenomenoChange);

        function fenomenoChange() {
            $('#FenomenoDesc').text(
                $('#ComoDesc').val() + " " +
                $('#QueDesc').val() + " " +
                $('#DondeDesc').val() + " " +
                $('#CuandoDesc').val() + " " +
                $('#CualDesc').val() + " " +
                $('#QuienDesc').val());
        }

        //TRANSCRIBIR FENOMENO ANTES DEL 5W
        $('#FenomenoDesc').change(transFen);
        function transFen() {
            $('#FenomenoDescT').text($('#FenomenoDesc').val());
        }

        //Tooltip
        $('[data-toggle="tooltip"]').tooltip({
            container: 'body'
        });

        //ITERACCIÓN POR QUE POR QUE
        $('#btnAddxQue').click(function () {

            $("#tblPorque").find('tbody').fadeIn(300, function () {
                $(this).append($('<tr>')
                    .append($('<td>').append('.'))
                    .append($('<td>').append(''))
                    .append($('<td>').append(''))
                    .append($('<td>').append(''))
                    .append($('<td>').append(''))
                    .append($('<td>').append('')));
            });

            $('#tblPorque').editableTableWidget();
        });

        $('#btnDeleteLastxQ').click(function () {

            $("#tblPorque").find('tbody').find('tr').last().fadeOut(300, function () { $(this).remove(); });

            return false;
        });

        $('#btnDeleteAllxQue').click(function () {

            $("#tblPorque").find('tbody').find('tr').fadeOut(300, function () { $(this).remove(); });

            return false;
        });

        function onRadioChanged(e) {
            //obtener id de la respuesta mediante el radio button seleccionado
            var idRes = e.target.id.split('_')[1];
            //obtener el valor a mostrar por respuesta seleccionada
            var valueRes = e.target.value;
            //cargar el puntaje de la respuesta seleccionada en la columna before
            $('#pt_' + idRes).text(valueRes);            

            //obtener la suma de todos los valores de la columna before            
            var sum = 0;
            $('.ptsBef').each(function () {
                sum += parseFloat($(this).text()); 
            });

            $('#befTotal').text(_.floor((sum / 25 * 100), 1) + '%');
        }

        function onRadioChangedAft(e) {
            //obtener id de la respuesta mediante el radio button seleccionado
            var idRes = e.target.id.split('_')[1];
            //obtener el valor a mostrar por respuesta seleccionada
            var valueRes = e.target.value;
            //cargar el puntaje de la respuesta seleccionada en la columna before
            $('#pta_' + idRes).text(valueRes);

            //obtener la suma de todos los valores de la columna before            
            var sum = 0;
            $('.ptsAft').each(function () {
                sum += parseFloat($(this).text());
            });

            var ttl = _.floor((sum / 25 * 100), 1);
            $('#aftTotal').text( ttl + '%');

            //fijar valor en el estado del incidente
            $('#statePercent').text(ttl + '%');
            $('#pgbAfter').añttr('aria-valuenow', ttl).css('width', ttl + '%');

            //indicar si ya está cerrado
            if (ttl >= 80) {
                $('input[name^="chkCerrado"]').prop('checked', true);
                $('#pgbAfter').addClass('bg-green');
                $('#pgbAfter').removeClass('bg-red');
            } else {
                $('input[name^="chkCerrado"]').prop('checked', false);
                $('#pgbAfter').addClass('bg-red');
                $('#pgbAfter').removeClass('bg-green');
            }
            
        }

        $(document).on('click', '#tblZeroBefore input[type=radio]', onRadioChanged);
        $(document).on('click', '#tblZeroAfter input[type=radio]', onRadioChangedAft);

    });
</script>
<script>
    //CARGAR DATOS DE INCIDENTES REPORTADOS
    $(function () {
        //CONSULTAR LA BASE DE DATOS
        if (idEdit) {
            //CARGAR LOS CAMPOS PARA SU EDICIÓN
            $.ajax({
                //PARAMETRIZAR SERVICIO AJAX
                url: '@Url.Action("GetEwoAsync", "ReportarIncidentes")',
                type: 'post',
                data: { id: idEdit },
                //MOSTRAR LOADER ANTES DE INICIAR LA SOLICITUD
                beforeSend: function () {
                    $('.page-loader-wrapper').fadeIn();
                },
                success: function (r)
                {
                    //console.log(r);
                    $('#TipoIncidente').val(r.TipoIncidente);
                    $('#IdArea').val(r.IdArea);
                    $('#IdLinea').val(r.IdLinea);
                    $('#IdCoorSup').val(r.IdCoorSup);
                    $('#IdRespArea').val(r.IdRespArea);
                    $('#IdOpeRes').val(r.IdOpeRes);
                    $('#IdLidInv').val(r.IdLidInv);
                    $('input[name^="Recurrente"]').prop('checked', r.RecurrenteB);

                    $('select').selectpicker('refresh');
                    $('.page-loader-wrapper').fadeOut();
                },
                //EN CASO DE ERROR, IMPRIMIRLO
                error: function (request, status, error) {
                    alert('Error al generar consultar inncidente reportado para procesamiento: ' + request.responseText);
                }
            });
        }
    });
</script>
